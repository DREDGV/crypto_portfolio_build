#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å GitHub"""

import subprocess
import sys
import os
from datetime import datetime

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=60)
        if result.returncode == 0:
            print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
            if result.stdout.strip():
                print(f"   {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå {description} - –æ—à–∏–±–∫–∞")
            if result.stderr.strip():
                print(f"   {result.stderr.strip()}")
            return False
    except subprocess.TimeoutExpired:
        print(f"‚è∞ {description} - —Ç–∞–π–º–∞—É—Ç")
        return False
    except Exception as e:
        print(f"‚ùå {description} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def main():
    print("üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å GitHub...")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞...")
    run_command("git status", "–°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
    
    # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
    run_command("git stash push -m '–õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º'", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    
    # 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print("\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å GitHub...")
    if not run_command("git fetch origin", "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"):
        return False
    
    # 4. –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ç–∫—É
    print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ç–∫–∏...")
    if not run_command("git pull origin master", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ç–∫–∏"):
        return False
    
    # 5. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏
    print("\nüè∑Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤...")
    run_command("git fetch --tags", "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤")
    
    # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã
    print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã:")
    run_command("git log --oneline -5", "–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤")
    
    # 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    print("\nüì± –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:")
    try:
        with open("VERSION", "r") as f:
            version = f.read().strip()
            print(f"   –í–µ—Ä—Å–∏—è: {version}")
    except:
        print("   –í–µ—Ä—Å–∏—è: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
    
    # 8. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥
    print("\nüè∑Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥:")
    run_command("git describe --tags --abbrev=0", "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥")
    
    print("=" * 50)
    print("üéâ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üìÖ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {current_date}")
    print("üîó –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω —Å GitHub")
    print("=" * 50)
    
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python -m app.main")
        print("   –∏–ª–∏")
        print("   start_app.bat")
    else:
        print("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
