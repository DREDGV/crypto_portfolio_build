#!/usr/bin/env python3
"""
Crypto Portfolio Manager - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –Ω–æ–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
–í—Å–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
"""

import os
import sys
from pathlib import Path

from dotenv import load_dotenv
from nicegui import ui

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ PYTHONPATH
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

# –ò–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ PYTHONPATH
from app.core.version import get_app_info
from app.storage.db import init_db
from app.core.services import (
    add_transaction,
    delete_transaction,
    enrich_positions_with_market,
    export_positions_csv,
    export_transactions_csv,
    get_portfolio_stats,
    get_transaction,
    get_transaction_stats,
    list_transactions,
    positions_fifo,
    update_transaction,
)
from app.core.models import TransactionIn

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
init_db()

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
app_info = get_app_info()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
CURRENCY = os.getenv("REPORT_CURRENCY", "USD").upper()
TYPES = ["buy", "sell", "exchange_in", "exchange_out", "deposit", "withdrawal"]
STRATS = ["long", "mid", "short", "scalp"]

# –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
TYPE_ICONS = {
    "buy": "üìà",
    "sell": "üìâ", 
    "exchange_in": "‚ÜóÔ∏è",
    "exchange_out": "‚ÜòÔ∏è",
    "deposit": "üí∞",
    "withdrawal": "üí∏",
}

# –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
STRATEGY_ICONS = {"long": "ü¶Ö", "mid": "‚öñÔ∏è", "short": "‚ö°", "scalp": "üéØ"}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
current_page = "overview"
content_container = None
transactions_table = None
positions_table = None


def create_improved_sidebar():
    """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å —Ä–∞–±–æ—á–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    with ui.column().classes(
        "w-72 h-screen bg-gradient-to-b from-slate-900 via-slate-800 to-slate-900 "
        "text-white shadow-2xl border-r border-slate-700"
    ):
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        with ui.row().classes("items-center p-6 border-b border-slate-700"):
            ui.icon("account_balance_wallet").classes("text-3xl text-indigo-400 mr-3")
            with ui.column().classes("flex-1"):
                ui.label("Crypto Portfolio").classes("text-xl font-bold text-white")
                ui.label(f"v{app_info['version']}").classes("text-sm text-slate-400")
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        with ui.column().classes("flex-1 p-4"):
            nav_items = [
                ("üìä", "–û–±–∑–æ—Ä", "overview", "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"),
                ("üíº", "–ü–æ–∑–∏—Ü–∏–∏", "positions", "–¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏"),
                ("üìù", "–°–¥–µ–ª–∫–∏", "transactions", "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"),
                ("üìà", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "analytics", "–ì—Ä–∞—Ñ–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏"),
            ]
            
            for icon, title, route, description in nav_items:
                is_active = route == current_page
                bg_class = "bg-indigo-600" if is_active else "hover:bg-slate-700"
                
                with ui.button().classes(
                    f"w-full justify-start p-4 mb-2 rounded-lg transition-all duration-200 {bg_class}"
                ).on_click(lambda r=route: navigate_to_page(r)):
                    with ui.row().classes("items-center w-full"):
                        ui.label(icon).classes("text-xl mr-3")
                        with ui.column().classes("flex-1 text-left"):
                            ui.label(title).classes("font-medium text-white")
                            ui.label(description).classes("text-xs text-slate-400")
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        with ui.column().classes("p-4 border-t border-slate-700"):
            ui.label("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è").classes("text-sm font-medium text-slate-400 mb-3")
            
            with ui.button().classes(
                "w-full justify-start p-3 mb-2 rounded-lg bg-slate-700 hover:bg-slate-600 "
                "transition-all duration-200 text-left"
            ).on_click(lambda: open_add_transaction_dialog()):
                ui.label("‚ûï").classes("text-lg mr-3")
                ui.label("–î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É").classes("text-sm text-white")
            
            with ui.button().classes(
                "w-full justify-start p-3 mb-2 rounded-lg bg-slate-700 hover:bg-slate-600 "
                "transition-all duration-200 text-left"
            ).on_click(lambda: refresh_data()):
                ui.label("üîÑ").classes("text-lg mr-3")
                ui.label("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ").classes("text-sm text-white")
            
            with ui.button().classes(
                "w-full justify-start p-3 mb-2 rounded-lg bg-slate-700 hover:bg-slate-600 "
                "transition-all duration-200 text-left"
            ).on_click(lambda: export_data()):
                ui.label("üì•").classes("text-lg mr-3")
                ui.label("–≠–∫—Å–ø–æ—Ä—Ç").classes("text-sm text-white")


def create_improved_header():
    """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    with ui.row().classes(
        "w-full h-16 bg-white shadow-sm border-b border-gray-200 px-6 "
        "items-center justify-between sticky top-0 z-10"
    ):
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        with ui.row().classes("items-center"):
            ui.icon("account_balance_wallet").classes("text-2xl text-indigo-600 mr-3")
            with ui.column().classes("items-start"):
                ui.label("Crypto Portfolio Manager").classes("text-xl font-bold text-gray-800")
                ui.label(f"v{app_info['version']}").classes("text-sm text-gray-500")
        
        # –ü–æ–∏—Å–∫ –∏ –¥–µ–π—Å—Ç–≤–∏—è
        with ui.row().classes("items-center space-x-4"):
            # –ü–æ–∏—Å–∫
            search_input = ui.input("–ü–æ–∏—Å–∫...").classes(
                "w-64 px-4 py-2 border border-gray-300 rounded-lg "
                "focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200"
            )
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            with ui.button("–û–±–Ω–æ–≤–∏—Ç—å", icon="refresh").classes(
                "bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg transition-all duration-200"
            ).on_click(lambda: refresh_data()):
                pass
            
            with ui.button("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", icon="settings").classes(
                "bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg transition-all duration-200"
            ).on_click(lambda: open_settings_dialog()):
                pass


def navigate_to_page(route):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏"""
    global current_page
    current_page = route
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    content_container.clear()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    with content_container:
        if route == "overview":
            create_overview_page()
        elif route == "positions":
            create_positions_page()
        elif route == "transactions":
            create_transactions_page()
        elif route == "analytics":
            create_analytics_page()
        else:
            create_overview_page()
    
    ui.notify(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {route}", color="info")


def create_overview_page():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–∑–æ—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    with ui.column().classes("w-full space-y-6"):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        with ui.row().classes("items-center justify-between"):
            ui.label("–û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è").classes("text-3xl font-bold text-gray-800")
            with ui.button("–û–±–Ω–æ–≤–∏—Ç—å", icon="refresh").classes(
                "bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg"
            ).on_click(lambda: refresh_data()):
                pass
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        with ui.row().classes("gap-6 mb-8"):
            create_portfolio_stat_card("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", "$0.00", "üí∞", "primary")
            create_portfolio_stat_card("–î–Ω–µ–≤–Ω–æ–π PnL", "+$0.00", "üìà", "success")
            create_portfolio_stat_card("–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", "+$0.00", "üíé", "info")
            create_portfolio_stat_card("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", "+$0.00", "‚úÖ", "warning")
        
        # –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        with ui.row().classes("gap-6"):
            # –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            with ui.card().classes("flex-1 p-6 bg-white shadow-sm rounded-lg"):
                ui.label("–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è").classes("text-lg font-semibold text-gray-800 mb-4")
                with ui.row().classes("h-64 items-center justify-center bg-gray-50 rounded-lg"):
                    ui.label("üìä –ì—Ä–∞—Ñ–∏–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ").classes("text-gray-500 text-lg")
            
            # –¢–æ–ø –ø–æ–∑–∏—Ü–∏–∏
            with ui.card().classes("flex-1 p-6 bg-white shadow-sm rounded-lg"):
                ui.label("–¢–æ–ø –ø–æ–∑–∏—Ü–∏–∏").classes("text-lg font-semibold text-gray-800 mb-4")
                with ui.column().classes("space-y-3"):
                    for i in range(3):
                        with ui.row().classes("items-center justify-between p-3 bg-gray-50 rounded-lg"):
                            ui.label(f"–ü–æ–∑–∏—Ü–∏—è {i+1}").classes("font-medium text-gray-700")
                            ui.label("$0.00").classes("text-green-600 font-semibold")


def create_positions_page():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∑–∏—Ü–∏–π"""
    global positions_table
    
    with ui.column().classes("w-full space-y-6"):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
        with ui.row().classes("items-center justify-between"):
            ui.label("–ü–æ–∑–∏—Ü–∏–∏").classes("text-3xl font-bold text-gray-800")
            with ui.row().classes("items-center space-x-3"):
                with ui.select(["–í—Å–µ –º–æ–Ω–µ—Ç—ã", "BTC", "ETH", "SOL"]).classes(
                    "w-40 p-2 border border-gray-300 rounded-lg"
                ):
                    pass
                with ui.button("–≠–∫—Å–ø–æ—Ä—Ç", icon="download").classes(
                    "bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg"
                ).on_click(lambda: export_positions()):
                    pass
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
        with ui.card().classes("w-full p-6 bg-white shadow-sm rounded-lg"):
            ui.label("–ü–æ–∑–∏—Ü–∏–∏").classes("text-lg font-semibold text-gray-800 mb-4")
            
            columns = [
                {"name": "coin", "label": "–ú–æ–Ω–µ—Ç–∞", "field": "coin", "sortable": True},
                {"name": "strategy", "label": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "field": "strategy", "sortable": True},
                {"name": "quantity", "label": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "field": "quantity", "sortable": True},
                {"name": "avg_cost", "label": "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", "field": "avg_cost", "sortable": True},
                {"name": "current_price", "label": "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", "field": "current_price", "sortable": True},
                {"name": "value", "label": "–°—Ç–æ–∏–º–æ—Å—Ç—å", "field": "value", "sortable": True},
                {"name": "pnl", "label": "PnL", "field": "pnl", "sortable": True},
                {"name": "pnl_pct", "label": "PnL %", "field": "pnl_pct", "sortable": True},
            ]
            
            positions_table = ui.table(columns=columns, rows=[]).classes(
                "w-full bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden"
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            load_positions_data()


def create_transactions_page():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–¥–µ–ª–æ–∫"""
    global transactions_table
    
    with ui.column().classes("w-full space-y-6"):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏—è
        with ui.row().classes("items-center justify-between"):
            ui.label("–°–¥–µ–ª–∫–∏").classes("text-3xl font-bold text-gray-800")
            with ui.row().classes("items-center space-x-3"):
                with ui.button("–î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É", icon="add").classes(
                    "bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg"
                ).on_click(lambda: open_add_transaction_dialog()):
                    pass
                with ui.button("–≠–∫—Å–ø–æ—Ä—Ç", icon="download").classes(
                    "bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg"
                ).on_click(lambda: export_transactions()):
                    pass
        
        # –§–∏–ª—å—Ç—Ä—ã
        with ui.card().classes("w-full p-4 bg-white shadow-sm rounded-lg"):
            with ui.row().classes("items-center space-x-4"):
                coin_filter = ui.select(["–í—Å–µ", "BTC", "ETH", "SOL"]).classes("w-32 p-2 border border-gray-300 rounded-lg")
                type_filter = ui.select(["–í—Å–µ", "–ü–æ–∫—É–ø–∫–∞", "–ü—Ä–æ–¥–∞–∂–∞"]).classes("w-32 p-2 border border-gray-300 rounded-lg")
                strategy_filter = ui.select(["–í—Å–µ", "Long", "Mid", "Short", "Scalp"]).classes("w-32 p-2 border border-gray-300 rounded-lg")
                with ui.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å", icon="filter_list").classes(
                    "bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg"
                ).on_click(lambda: apply_filters(coin_filter.value, type_filter.value, strategy_filter.value)):
                    pass
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫
        with ui.card().classes("w-full p-6 bg-white shadow-sm rounded-lg"):
            ui.label("–°–¥–µ–ª–∫–∏").classes("text-lg font-semibold text-gray-800 mb-4")
            
            columns = [
                {"name": "id", "label": "ID", "field": "id", "sortable": True},
                {"name": "coin", "label": "–ú–æ–Ω–µ—Ç–∞", "field": "coin", "sortable": True},
                {"name": "type", "label": "–¢–∏–ø", "field": "type", "sortable": True},
                {"name": "quantity", "label": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "field": "quantity", "sortable": True},
                {"name": "price", "label": "–¶–µ–Ω–∞", "field": "price", "sortable": True},
                {"name": "strategy", "label": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "field": "strategy", "sortable": True},
                {"name": "date", "label": "–î–∞—Ç–∞", "field": "date", "sortable": True},
                {"name": "actions", "label": "–î–µ–π—Å—Ç–≤–∏—è", "field": "actions"},
            ]
            
            transactions_table = ui.table(columns=columns, rows=[]).classes(
                "w-full bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden"
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            load_transactions_data()


def create_analytics_page():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    with ui.column().classes("w-full space-y-6"):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ui.label("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞").classes("text-3xl font-bold text-gray-800")
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        with ui.row().classes("gap-6 mb-8"):
            create_analytics_card("Sharpe Ratio", "0.00", "üìä", "primary")
            create_analytics_card("Max Drawdown", "0.00%", "üìâ", "error")
            create_analytics_card("Volatility", "0.00%", "üìà", "warning")
            create_analytics_card("Win Rate", "0.00%", "üéØ", "success")
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        with ui.row().classes("gap-6"):
            # –ì—Ä–∞—Ñ–∏–∫ PnL
            with ui.card().classes("flex-1 p-6 bg-white shadow-sm rounded-lg"):
                ui.label("PnL –ø–æ –≤—Ä–µ–º–µ–Ω–∏").classes("text-lg font-semibold text-gray-800 mb-4")
                with ui.row().classes("h-64 items-center justify-center bg-gray-50 rounded-lg"):
                    ui.label("üìä –ì—Ä–∞—Ñ–∏–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ").classes("text-gray-500 text-lg")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–æ–Ω–µ—Ç–∞–º
            with ui.card().classes("flex-1 p-6 bg-white shadow-sm rounded-lg"):
                ui.label("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–æ–Ω–µ—Ç–∞–º").classes("text-lg font-semibold text-gray-800 mb-4")
                with ui.row().classes("h-64 items-center justify-center bg-gray-50 rounded-lg"):
                    ui.label("üìä –ì—Ä–∞—Ñ–∏–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ").classes("text-gray-500 text-lg")


def create_portfolio_stat_card(title, value, icon, color):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    color_classes = {
        "primary": "bg-gradient-to-r from-indigo-500 to-purple-600",
        "success": "bg-gradient-to-r from-green-500 to-emerald-600",
        "info": "bg-gradient-to-r from-blue-500 to-cyan-600",
        "warning": "bg-gradient-to-r from-yellow-500 to-orange-600",
    }
    
    with ui.card().classes(
        f"flex-1 p-6 text-white shadow-lg rounded-lg {color_classes.get(color, color_classes['primary'])}"
    ):
        with ui.row().classes("items-center justify-between mb-3"):
            ui.label(icon).classes("text-3xl")
            ui.label(value).classes("text-2xl font-bold")
        ui.label(title).classes("text-sm opacity-90")


def create_analytics_card(title, value, icon, color):
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    color_classes = {
        "primary": "bg-gradient-to-r from-indigo-500 to-purple-600",
        "success": "bg-gradient-to-r from-green-500 to-emerald-600",
        "info": "bg-gradient-to-r from-blue-500 to-cyan-600",
        "warning": "bg-gradient-to-r from-yellow-500 to-orange-600",
        "error": "bg-gradient-to-r from-red-500 to-pink-600",
    }
    
    with ui.card().classes(
        f"flex-1 p-6 text-white shadow-lg rounded-lg {color_classes.get(color, color_classes['primary'])}"
    ):
        with ui.row().classes("items-center justify-between mb-3"):
            ui.label(icon).classes("text-3xl")
            ui.label(value).classes("text-2xl font-bold")
        ui.label(title).classes("text-sm opacity-90")


def open_add_transaction_dialog():
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    with ui.dialog() as dialog, ui.card().classes("w-full max-w-2xl p-6"):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        with ui.row().classes("items-center justify-between mb-6 pb-4 border-b border-gray-200"):
            ui.label("–î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É").classes("text-xl font-bold text-gray-800")
            with ui.button(icon="close").classes("text-gray-400 hover:text-gray-600").on_click(lambda: dialog.close()):
                pass
        
        # –§–æ—Ä–º–∞
        with ui.column().classes("space-y-4"):
            # –§–æ—Ä–º–∞ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
            with ui.row().classes("gap-4"):
                with ui.column().classes("flex-1 space-y-4"):
                    coin_input = ui.input("–ú–æ–Ω–µ—Ç–∞", placeholder="BTC, ETH, SOL...").classes(
                        "w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                    )
                    type_select = ui.select(TYPES, label="–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏").classes(
                        "w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                    )
                    qty_input = ui.input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", placeholder="0.0").classes(
                        "w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                    )
                    price_input = ui.input("–¶–µ–Ω–∞ –∑–∞ –º–æ–Ω–µ—Ç—É", placeholder="0.00").classes(
                        "w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                    )
                
                with ui.column().classes("flex-1 space-y-4"):
                    strategy_select = ui.select(STRATS, label="–°—Ç—Ä–∞—Ç–µ–≥–∏—è").classes(
                        "w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                    )
                    source_input = ui.input("–ò—Å—Ç–æ—á–Ω–∏–∫", placeholder="Binance, Coinbase...").classes(
                        "w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                    )
                    notes_input = ui.textarea("–ó–∞–º–µ—Ç–∫–∏", placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...").classes(
                        "w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                    )
            
            # –ö–Ω–æ–ø–∫–∏
            with ui.row().classes("justify-end space-x-3 pt-4 border-t border-gray-200"):
                with ui.button("–û—Ç–º–µ–Ω–∞").classes(
                    "bg-gray-300 hover:bg-gray-400 text-gray-700 px-6 py-2 rounded-lg"
                ).on_click(lambda: dialog.close()):
                    pass
                with ui.button("–î–æ–±–∞–≤–∏—Ç—å", icon="add").classes(
                    "bg-indigo-600 hover:bg-indigo-700 text-white px-6 py-2 rounded-lg"
                ).on_click(lambda: add_transaction_from_dialog(
                    coin_input.value, type_select.value, qty_input.value, 
                    price_input.value, strategy_select.value, source_input.value, notes_input.value, dialog
                )):
                    pass
    
    dialog.open()


def add_transaction_from_dialog(coin, type_op, qty, price, strategy, source, notes, dialog):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–¥–µ–ª–∫—É –∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        if not all([coin, type_op, qty, price, strategy]):
            ui.notify("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è", color="negative")
            return
        
        transaction = TransactionIn(
            coin=coin.upper(),
            type=type_op,
            quantity=float(qty),
            price=float(price),
            strategy=strategy,
            source=source or "Unknown",
            notes=notes or ""
        )
        
        add_transaction(transaction)
        ui.notify("–°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", color="positive")
        dialog.close()
        refresh_data()
        
    except Exception as e:
        ui.notify(f"–û—à–∏–±–∫–∞: {str(e)}", color="negative")


def open_settings_dialog():
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    with ui.dialog() as dialog, ui.card().classes("w-full max-w-lg p-6"):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        with ui.row().classes("items-center justify-between mb-6 pb-4 border-b border-gray-200"):
            ui.label("–ù–∞—Å—Ç—Ä–æ–π–∫–∏").classes("text-xl font-bold text-gray-800")
            with ui.button(icon="close").classes("text-gray-400 hover:text-gray-600").on_click(lambda: dialog.close()):
                pass
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        with ui.column().classes("space-y-4"):
            with ui.row().classes("items-center justify-between"):
                ui.label("–í–∞–ª—é—Ç–∞ –æ—Ç—á—ë—Ç–æ–≤").classes("text-gray-700")
                currency_select = ui.select(["USD", "EUR", "RUB"], value=CURRENCY).classes("w-32")
            
            with ui.row().classes("items-center justify-between"):
                ui.label("–¢–µ–º–Ω–∞—è —Ç–µ–º–∞").classes("text-gray-700")
                dark_theme_switch = ui.switch()
            
            with ui.row().classes("items-center justify-between"):
                ui.label("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è").classes("text-gray-700")
                notifications_switch = ui.switch()
        
        # –ö–Ω–æ–ø–∫–∏
        with ui.row().classes("justify-end space-x-3 pt-4 border-t border-gray-200"):
            with ui.button("–û—Ç–º–µ–Ω–∞").classes(
                "bg-gray-300 hover:bg-gray-400 text-gray-700 px-6 py-2 rounded-lg"
            ).on_click(lambda: dialog.close()):
                pass
            with ui.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å").classes(
                "bg-indigo-600 hover:bg-indigo-700 text-white px-6 py-2 rounded-lg"
            ).on_click(lambda: save_settings(currency_select.value, dark_theme_switch.value, notifications_switch.value, dialog)):
                pass
    
    dialog.open()


def save_settings(currency, dark_theme, notifications, dialog):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    ui.notify("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", color="positive")
    dialog.close()


def refresh_data():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    ui.notify("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", color="info")
    if transactions_table:
        load_transactions_data()
    if positions_table:
        load_positions_data()


def load_transactions_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–æ–∫"""
    if transactions_table:
        try:
            transactions = list_transactions()
            rows = []
            for t in transactions:
                rows.append({
                    "id": t.id,
                    "coin": t.coin,
                    "type": f"{TYPE_ICONS.get(t.type, '')} {t.type}",
                    "quantity": f"{t.quantity:.6f}",
                    "price": f"${t.price:.2f}",
                    "strategy": f"{STRATEGY_ICONS.get(t.strategy, '')} {t.strategy}",
                    "date": t.date.strftime("%Y-%m-%d %H:%M"),
                    "actions": "‚úèÔ∏è üóëÔ∏è"
                })
            transactions_table.rows = rows
        except Exception as e:
            ui.notify(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫: {str(e)}", color="negative")


def load_positions_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π"""
    if positions_table:
        try:
            positions = positions_fifo()
            enriched_positions = enrich_positions_with_market(positions)
            rows = []
            for p in enriched_positions:
                pnl_color = "text-green-600" if p.get("pnl", 0) > 0 else "text-red-600" if p.get("pnl", 0) < 0 else "text-gray-600"
                rows.append({
                    "coin": p["coin"],
                    "strategy": f"{STRATEGY_ICONS.get(p['strategy'], '')} {p['strategy']}",
                    "quantity": f"{p['quantity']:.6f}",
                    "avg_cost": f"${p['avg_cost']:.2f}",
                    "current_price": f"${p.get('current_price', 0):.2f}",
                    "value": f"${p.get('value', 0):.2f}",
                    "pnl": f"${p.get('pnl', 0):.2f}",
                    "pnl_pct": f"{p.get('pnl_pct', 0):.2f}%"
                })
            positions_table.rows = rows
        except Exception as e:
            ui.notify(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {str(e)}", color="negative")


def apply_filters(coin, type_op, strategy):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã"""
    ui.notify(f"–§–∏–ª—å—Ç—Ä—ã: {coin}, {type_op}, {strategy}", color="info")
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏


def export_transactions():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫–∏"""
    try:
        export_transactions_csv()
        ui.notify("–°–¥–µ–ª–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV!", color="positive")
    except Exception as e:
        ui.notify(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", color="negative")


def export_positions():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        export_positions_csv()
        ui.notify("–ü–æ–∑–∏—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV!", color="positive")
    except Exception as e:
        ui.notify(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", color="negative")


def export_data():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        export_transactions_csv()
        export_positions_csv()
        ui.notify("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV!", color="positive")
    except Exception as e:
        ui.notify(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", color="negative")


def create_main_layout():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global content_container
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    with ui.row().classes("w-full h-screen overflow-hidden"):
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å (—Å–ª–µ–≤–∞)
        create_improved_sidebar()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Å–ø—Ä–∞–≤–∞)
        with ui.column().classes("flex-1 flex flex-col"):
            # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
            create_improved_header()
            
            # –û–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            with ui.column().classes("flex-1 p-6 bg-gray-50 overflow-auto") as container:
                content_container = container
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                create_overview_page()


# –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@ui.page("/")
def index_page():
    ui.navigate.to("/portfolio")


@ui.page("/portfolio")
def portfolio():
    create_main_layout()


@ui.page("/about")
def about_page():
    with ui.column().classes("max-w-4xl mx-auto p-6"):
        with ui.card().classes("p-8 bg-white shadow-lg rounded-lg"):
            ui.label("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ").classes("text-3xl font-bold text-gray-800 mb-6")
            
            with ui.column().classes("space-y-4"):
                ui.label(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {app_info['name']}").classes("text-lg text-gray-700")
                ui.label(f"–í–µ—Ä—Å–∏—è: {app_info['version']}").classes("text-lg text-gray-700")
                ui.label("–û–ø–∏—Å–∞–Ω–∏–µ: –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–ø–æ—Ä—Ç—Ñ–µ–ª–µ–º").classes("text-lg text-gray-700")
                
                with ui.row().classes("mt-6 space-x-4"):
                    with ui.button("GitHub", icon="code").classes(
                        "bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg"
                    ):
                        pass
                    with ui.button("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", icon="description").classes(
                        "bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg"
                    ):
                        pass


# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DEV = os.getenv("DEV", "0") == "1"
PORT = int(os.getenv("APP_PORT", "8083"))

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if __name__ == "__main__":
    ui.run(
        host="127.0.0.1",
        port=PORT,
        reload=DEV,
        show=True,
        title="Crypto Portfolio ‚Äî Improved",
        favicon="üöÄ",
    )
