#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Ü–µ–Ω
"""

import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.adapters.prices import get_aggregated_price


def test_aggregated_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Ü–µ–Ω"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ê–ì–†–ï–ì–ê–¶–ò–ò –¶–ï–ù")
    print("=" * 60)

    # –¢–µ—Å—Ç–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã
    test_coins = ["LINK", "BTC", "ETH", "SOL", "ADA"]

    print(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫–∏: CoinGecko, Binance, CoinPaprika, Coinbase, Kraken, OKX")
    print(f"üí∞ –í–∞–ª—é—Ç–∞: USD")
    print(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ >20% –æ—Ç –º–µ–¥–∏–∞–Ω—ã")
    print()

    for coin in test_coins:
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {coin}...")

        # –ü–æ–ª—É—á–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        result = get_aggregated_price(coin)

        if result:
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"      üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${result['price']:,.2f}")
            print(f"      üìà –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {result['source_count']}")
            print(f"      üè¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(result['sources'])}")

            if "price_range" in result:
                price_range = result["price_range"]
                print(
                    f"      üìä –î–∏–∞–ø–∞–∑–æ–Ω: ${price_range['min']:,.2f} - ${price_range['max']:,.2f}"
                )
                print(f"      üìè –†–∞–∑–±—Ä–æ—Å: ${price_range['spread']:,.2f}")

                if price_range["spread"] > 0:
                    spread_percent = (price_range["spread"] / result["price"]) * 100
                    print(f"      üìä –†–∞–∑–±—Ä–æ—Å: {spread_percent:.1f}%")

            print(f"      üíæ –ò–∑ –∫—ç—à–∞: {'–î–∞' if result.get('cached') else '–ù–µ—Ç'}")
        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

        print()

    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    test_aggregated_system()
