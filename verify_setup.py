#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import sys
import os

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    print(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False
    print("‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç")
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    required_packages = [
        'nicegui',
        'sqlmodel', 
        'sqlalchemy',
        'aiosqlite',
        'pydantic',
        'httpx',
        'dotenv'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            if package == 'dotenv':
                import python_dotenv
            else:
                __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: pip install -r requirements.txt")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def check_app_modules():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        from app.core.models import Transaction, TransactionIn
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö")
    except ImportError as e:
        print(f"‚ùå –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    try:
        from app.core.services import add_transaction, list_transactions, positions_fifo
        print("‚úÖ –°–µ—Ä–≤–∏—Å—ã")
    except ImportError as e:
        print(f"‚ùå –°–µ—Ä–≤–∏—Å—ã: {e}")
        return False
    
    try:
        from app.adapters.prices import get_current_price
        print("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä —Ü–µ–Ω")
    except ImportError as e:
        print(f"‚ùå –ê–¥–∞–ø—Ç–µ—Ä —Ü–µ–Ω: {e}")
        return False
    
    try:
        from app.storage.db import init_db
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    except ImportError as e:
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    try:
        from app.ui.pages import portfolio_page
        print("‚úÖ UI —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    except ImportError as e:
        print(f"‚ùå UI —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return False
    
    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
    return True

def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüíæ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from app.storage.db import init_db, DB_PATH
        init_db()
        
        if os.path.exists(DB_PATH):
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏
        from app.core.services import list_transactions
        transactions = list_transactions()
        print(f"‚úÖ –í –±–∞–∑–µ {len(transactions)} —Å–¥–µ–ª–æ–∫")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    return True

def check_api():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç API —Ü–µ–Ω"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ü–µ–Ω...")
    
    try:
        from app.adapters.prices import get_current_price
        price = get_current_price('BTC')
        
        if price:
            print(f"‚úÖ API —Ü–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç (BTC: ${price:,.2f})")
        else:
            print("‚ö†Ô∏è API —Ü–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API —Ü–µ–Ω: {e}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("=" * 50)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
    print("=" * 50)
    
    checks = [
        check_python_version,
        check_dependencies,
        check_app_modules,
        check_database,
        check_api
    ]
    
    all_passed = True
    
    for check in checks:
        if not check():
            all_passed = False
    
    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ: quick_start.bat")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞")
    print("=" * 50)

if __name__ == "__main__":
    main()
