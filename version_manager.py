#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ Crypto Portfolio Manager
–°–ª–µ–¥—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É Semantic Versioning (SemVer)
"""

import argparse
import sys
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.append(str(Path(__file__).parent))

from app.core.version import (
    get_version,
    increment_version,
    is_valid_version,
    parse_version,
)


def update_version_file(new_version: str) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª VERSION —Å –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π."""
    version_file = Path("VERSION")
    version_file.write_text(f"{new_version}\n", encoding="utf-8")
    print(f"‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ VERSION: {new_version}")


def update_changelog(new_version: str, changes: str) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç CHANGELOG.md —Å –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏."""
    changelog_file = Path("CHANGELOG.md")

    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if changelog_file.exists():
        content = changelog_file.read_text(encoding="utf-8")
    else:
        content = "# –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    today = datetime.now().strftime("%Y-%m-%d")
    new_entry = f"""
## [{new_version}] - {today}

{changes}

"""

    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    lines = content.split("\n")
    if len(lines) > 2:
        lines.insert(2, new_entry)
    else:
        lines.append(new_entry)

    changelog_file.write_text("\n".join(lines), encoding="utf-8")
    print(f"‚úÖ Changelog –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤–µ—Ä—Å–∏–∏ {new_version}")


def show_version_info() -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏."""
    current_version = get_version()
    major, minor, patch = parse_version(current_version)

    print("üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ï–†–°–ò–ò")
    print("=" * 40)
    print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_version}")
    print(f"Major: {major}")
    print(f"Minor: {minor}")
    print(f"Patch: {patch}")
    print(f"–í–∞–ª–∏–¥–Ω–∞—è –≤–µ—Ä—Å–∏—è: {'‚úÖ' if is_valid_version(current_version) else '‚ùå'}")
    print(f"–°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {'‚úÖ' if major > 0 else '‚ùå'}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ –≤–µ—Ä—Å–∏–∏
    print("\nüîÑ –í–û–ó–ú–û–ñ–ù–´–ï –°–õ–ï–î–£–Æ–©–ò–ï –í–ï–†–°–ò–ò:")
    print(f"Patch: {increment_version(current_version, 'patch')}")
    print(f"Minor: {increment_version(current_version, 'minor')}")
    print(f"Major: {increment_version(current_version, 'major')}")


def bump_version(version_type: str, changes: str = "") -> None:
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã."""
    current_version = get_version()

    if not is_valid_version(current_version):
        print(f"‚ùå –û—à–∏–±–∫–∞: –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è '{current_version}' –Ω–µ–≤–∞–ª–∏–¥–Ω–∞")
        return

    new_version = increment_version(current_version, version_type)

    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏: {current_version} ‚Üí {new_version}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
    update_version_file(new_version)

    if changes:
        update_changelog(new_version, changes)
    else:
        print("‚ö†Ô∏è  Changelog –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω (–Ω–µ —É–∫–∞–∑–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è)")

    print(f"\n‚úÖ –í–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_version}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    parser = argparse.ArgumentParser(
        description="–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–µ—Ä—Å–∏–π Crypto Portfolio Manager",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python version_manager.py info                    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏
  python version_manager.py bump patch             # –£–≤–µ–ª–∏—á–∏—Ç—å patch –≤–µ—Ä—Å–∏—é
  python version_manager.py bump minor             # –£–≤–µ–ª–∏—á–∏—Ç—å minor –≤–µ—Ä—Å–∏—é
  python version_manager.py bump major             # –£–≤–µ–ª–∏—á–∏—Ç—å major –≤–µ—Ä—Å–∏—é
  python version_manager.py bump patch -c "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞"  # –° –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        """,
    )

    subparsers = parser.add_subparsers(dest="command", help="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")

    # –ö–æ–º–∞–Ω–¥–∞ info
    subparsers.add_parser("info", help="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏")

    # –ö–æ–º–∞–Ω–¥–∞ bump
    bump_parser = subparsers.add_parser("bump", help="–£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Ä—Å–∏—é")
    bump_parser.add_argument(
        "type", choices=["major", "minor", "patch"], help="–¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏"
    )
    bump_parser.add_argument("-c", "--changes", help="–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è changelog")

    args = parser.parse_args()

    if args.command == "info":
        show_version_info()
    elif args.command == "bump":
        bump_version(args.type, args.changes or "")
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
