#!/usr/bin/env python3
"""–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""


def fix_database():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å —Ç–∞–±–ª–∏—Ü–µ–π transaction"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    try:
        import os
        import shutil
        from datetime import datetime

        # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_path = "data/portfolio.db"

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        if os.path.exists(db_path):
            backup_dir = "data/backups"
            os.makedirs(backup_dir, exist_ok=True)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = os.path.join(backup_dir, f"portfolio_backup_{timestamp}.db")
            shutil.copy2(db_path, backup_path)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É
            os.remove(db_path)
            print("‚úÖ –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")

        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        from app.storage.db import init_db

        init_db()
        print("‚úÖ –ù–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        print("\nüîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...")
        from app.core.models import TransactionIn
        from app.core.services import add_transaction

        demo_transactions = [
            TransactionIn(
                coin="BTC",
                type="buy",
                quantity=0.1,
                price=45000.00,
                source="Binance",
                strategy="long",
                notes="–ü–æ–∫—É–ø–∫–∞ Bitcoin",
            ),
            TransactionIn(
                coin="ETH",
                type="buy",
                quantity=2.0,
                price=3000.00,
                source="Coinbase",
                strategy="long",
                notes="–ü–æ–∫—É–ø–∫–∞ Ethereum",
            ),
            TransactionIn(
                coin="SOL",
                type="buy",
                quantity=50.0,
                price=100.00,
                source="Binance",
                strategy="long",
                notes="–ü–æ–∫—É–ø–∫–∞ Solana",
            ),
            TransactionIn(
                coin="ADA",
                type="buy",
                quantity=1000.0,
                price=0.50,
                source="Kraken",
                strategy="long",
                notes="–ü–æ–∫—É–ø–∫–∞ Cardano",
            ),
            TransactionIn(
                coin="DOT",
                type="buy",
                quantity=100.0,
                price=25.00,
                source="Binance",
                strategy="long",
                notes="–ü–æ–∫—É–ø–∫–∞ Polkadot",
            ),
        ]

        added_count = 0
        for tx in demo_transactions:
            try:
                success = add_transaction(tx)
                if success:
                    added_count += 1
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: {tx.coin}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {tx.coin}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ {tx.coin}: {e}")

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–π
        print("\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π...")
        from datetime import datetime, timedelta

        from app.models.broker_models import Broker, StockInstrument, StockTransactionIn
        from app.services.broker_service import StockService

        stock_service = StockService()

        # –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–æ–∫–µ—Ä–∞
        tinkoff_broker = Broker(
            id="tinkoff",
            name="–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
            api_url="https://invest-public-api.tinkoff.ru/rest",
            is_active=True,
            description="–†–æ—Å—Å–∏–π—Å–∫–∏–π –±—Ä–æ–∫–µ—Ä –¢–∏–Ω—å–∫–æ—Ñ—Ñ",
        )

        try:
            stock_service.add_broker(tinkoff_broker)
            print("‚úÖ –ë—Ä–æ–∫–µ—Ä –¢–∏–Ω—å–∫–æ—Ñ—Ñ –¥–æ–±–∞–≤–ª–µ–Ω")
        except:
            print("‚ÑπÔ∏è –ë—Ä–æ–∫–µ—Ä –¢–∏–Ω—å–∫–æ—Ñ—Ñ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        count = stock_service.sync_broker_instruments("tinkoff")
        print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {count} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–∫—Ü–∏–π
        demo_stock_transactions = [
            StockTransactionIn(
                ticker="SBER",
                broker_id="tinkoff",
                quantity=10,
                price=250.50,
                commission=25.05,
                transaction_type="buy",
                transaction_date=datetime.utcnow() - timedelta(days=30),
            ),
            StockTransactionIn(
                ticker="GAZP",
                broker_id="tinkoff",
                quantity=50,
                price=180.25,
                commission=90.13,
                transaction_type="buy",
                transaction_date=datetime.utcnow() - timedelta(days=20),
            ),
            StockTransactionIn(
                ticker="LKOH",
                broker_id="tinkoff",
                quantity=5,
                price=4500.00,
                commission=225.00,
                transaction_type="buy",
                transaction_date=datetime.utcnow() - timedelta(days=10),
            ),
            StockTransactionIn(
                ticker="YNDX",
                broker_id="tinkoff",
                quantity=2,
                price=3200.75,
                commission=64.02,
                transaction_type="buy",
                transaction_date=datetime.utcnow() - timedelta(days=5),
            ),
        ]

        for tx in demo_stock_transactions:
            try:
                success = stock_service.add_stock_transaction(tx)
                if success:
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–∫—Ü–∏—è: {tx.ticker}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ü–∏–∏: {tx.ticker}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ü–∏–∏ {tx.ticker}: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        from app.core.services import get_portfolio_stats

        stats = get_portfolio_stats()
        print(f"   üìà –ü–æ–∑–∏—Ü–∏–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {len(stats.get('positions', []))}")
        print(f"   üìà –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats.get('total_transactions', 0)}")

        positions = stock_service.calculate_stock_positions()
        print(f"   üìà –ü–æ–∑–∏—Ü–∏–π –∞–∫—Ü–∏–π: {len(positions)}")

        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    fix_database()
