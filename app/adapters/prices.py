import json
import random
import time

import httpx

_cache: dict[tuple[str, str], tuple[float, float]] = {}

ID_MAP = {
    "BTC": "bitcoin",
    "ETH": "ethereum",
    "XLM": "stellar",
    "USDT": "tether",
    "SOL": "solana",
    "BNB": "binancecoin",
    "XRP": "ripple",
    "ADA": "cardano",
    "DOGE": "dogecoin",
    "TRX": "tron",
    "TON": "the-open-network",
    "DOT": "polkadot",
    "LINK": "chainlink",
    "UNI": "uniswap",
    "MATIC": "matic-network",
    "AVAX": "avalanche-2",
    "ATOM": "cosmos",
    "NEAR": "near",
    "FTM": "fantom",
    "ALGO": "algorand",
    "VET": "vechain",
    "ICP": "internet-computer",
    "FIL": "filecoin",
    "THETA": "theta-token",
    "EOS": "eos",
    "AAVE": "aave",
    "SUSHI": "sushi",
    "COMP": "compound-governance-token",
    "YFI": "yearn-finance",
    "SNX": "havven",
    "MKR": "maker",
    "CRV": "curve-dao-token",
    "1INCH": "1inch",
    "BAT": "basic-attention-token",
    "ZRX": "0x",
    "ENJ": "enjincoin",
    "MANA": "decentraland",
    "SAND": "the-sandbox",
    "AXS": "axie-infinity",
    "CHZ": "chiliz",
    "FLOW": "flow",
    "XTZ": "tezos",
    "NEO": "neo",
    "QTUM": "qtum",
    "DASH": "dash",
    "ZEC": "zcash",
    "XMR": "monero",
    "LTC": "litecoin",
    "BCH": "bitcoin-cash",
}


def get_current_price(symbol: str, quote: str = "USD") -> float | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —á–µ—Ä–µ–∑ CoinGecko Simple Price API.

    Args:
        symbol: –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTC', 'ETH')
        quote: –í–∞–ª—é—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'USD')

    Returns:
        float | None: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    if not symbol:
        return None

    sym = symbol.upper()
    q = quote.lower()
    key = (sym, q)
    now = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–∞–∫—Ç—É–∞–ª–µ–Ω 5 –º–∏–Ω—É—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
    if key in _cache and now - _cache[key][1] < 300:
        return _cache[key][0]

    # –ü–æ–ª—É—á–∞–µ–º ID –º–æ–Ω–µ—Ç—ã –¥–ª—è CoinGecko API
    coin_id = ID_MAP.get(sym, sym.lower())

    # URL –¥–ª—è CoinGecko Simple Price API
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {
        "ids": coin_id,
        "vs_currencies": q,
        "include_24hr_change": "true",  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞ 24—á
        "include_last_updated_at": "true",  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    }

    try:
        with httpx.Client(timeout=10.0) as client:
            r = client.get(url, params=params)
            r.raise_for_status()
            data = r.json()

            if coin_id in data:
                coin_data = data[coin_id]
                price = float(coin_data.get(q, 0.0))

                if price > 0:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
                    _cache[key] = (price, now)
                    return price
                else:
                    print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –Ω—É–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è {sym}")
                    return None
            else:
                print(f"‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ {sym} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ API")
                return None

    except httpx.TimeoutException:
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {sym}")
        return None
    except httpx.HTTPStatusError as e:
        print(f"üåê HTTP –æ—à–∏–±–∫–∞ {e.response.status_code} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {sym}")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {sym}: {e}")
        return None


def get_price_info(symbol: str, quote: str = "USD") -> dict | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ —á–µ—Ä–µ–∑ CoinGecko API.

    Args:
        symbol: –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTC', 'ETH')
        quote: –í–∞–ª—é—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'USD')

    Returns:
        dict | None: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        {
            'price': float,
            'change_24h': float,
            'last_updated': int,
            'cached': bool
        }
    """
    if not symbol:
        return None

    sym = symbol.upper()
    q = quote.lower()
    key = (sym, q)
    now = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–∞–∫—Ç—É–∞–ª–µ–Ω 5 –º–∏–Ω—É—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
    if key in _cache and now - _cache[key][1] < 300:
        return {
            "price": _cache[key][0],
            "change_24h": None,
            "last_updated": int(_cache[key][1]),
            "cached": True,
        }

    # –ü–æ–ª—É—á–∞–µ–º ID –º–æ–Ω–µ—Ç—ã –¥–ª—è CoinGecko API
    coin_id = ID_MAP.get(sym, sym.lower())

    # URL –¥–ª—è CoinGecko Simple Price API
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {
        "ids": coin_id,
        "vs_currencies": q,
        "include_24hr_change": "true",
        "include_last_updated_at": "true",
    }

    try:
        with httpx.Client(timeout=10.0) as client:
            r = client.get(url, params=params)
            r.raise_for_status()
            data = r.json()

            if coin_id in data:
                coin_data = data[coin_id]
                price = float(coin_data.get(q, 0.0))
                change_24h = coin_data.get(f"{q}_24h_change")
                last_updated = coin_data.get("last_updated_at")

                if price > 0:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                    _cache[key] = (price, now)

                    return {
                        "price": price,
                        "change_24h": change_24h,
                        "last_updated": last_updated,
                        "cached": False,
                    }
                else:
                    return None
            else:
                return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–µ –¥–ª—è {sym}: {e}")
        return None


def get_price_from_binance(symbol: str, quote: str = "USD") -> float | None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Å Binance API –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫."""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è Binance API
        binance_symbol = f"{symbol.upper()}USDT"
        url = "https://api.binance.com/api/v3/ticker/price"
        params = {"symbol": binance_symbol}

        with httpx.Client(timeout=5.0) as client:
            r = client.get(url, params=params)
            r.raise_for_status()
            data = r.json()
            return float(data.get("price", 0))
    except Exception as e:
        print(f"‚ö†Ô∏è Binance API –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
        return None


def get_price_from_coinpaprika(symbol: str, quote: str = "USD") -> float | None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Å CoinPaprika API –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫."""
    try:
        # CoinPaprika –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ID –º–æ–Ω–µ—Ç, –∞ –Ω–µ —Å–∏–º–≤–æ–ª—ã
        coin_id_map = {
            "BTC": "btc-bitcoin",
            "ETH": "eth-ethereum",
            "LINK": "link-chainlink",
            "SOL": "sol-solana",
            "ADA": "ada-cardano",
            "DOT": "dot-polkadot",
            "UNI": "uni-uniswap",
            "MATIC": "matic-polygon",
        }

        coin_id = coin_id_map.get(symbol.upper(), symbol.lower())
        url = f"https://api.coinpaprika.com/v1/tickers/{coin_id}"

        with httpx.Client(timeout=5.0) as client:
            r = client.get(url)
            r.raise_for_status()
            data = r.json()
            quotes = data.get("quotes", {})
            usd_quote = quotes.get("USD", {})
            return float(usd_quote.get("price", 0))
    except Exception as e:
        print(f"‚ö†Ô∏è CoinPaprika API –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
        return None


def get_price_from_coinbase(symbol: str, quote: str = "USD") -> float | None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Å Coinbase API –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫."""
    try:
        # Coinbase –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –Ω–∞–ø—Ä—è–º—É—é
        url = f"https://api.coinbase.com/v2/exchange-rates"
        params = {"currency": symbol.upper()}

        with httpx.Client(timeout=5.0) as client:
            r = client.get(url, params=params)
            r.raise_for_status()
            data = r.json()
            rates = data.get("data", {}).get("rates", {})
            usd_rate = rates.get("USD")
            if usd_rate:
                return float(usd_rate)
            return None
    except Exception as e:
        print(f"‚ö†Ô∏è Coinbase API –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
        return None


def get_price_from_kraken(symbol: str, quote: str = "USD") -> float | None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Å Kraken API –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫."""
    try:
        # Kraken –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        kraken_symbol_map = {
            "BTC": "XXBTZUSD",
            "ETH": "XETHZUSD",
            "LINK": "LINKUSD",
            "SOL": "SOLUSD",
            "ADA": "ADAUSD",
            "DOT": "DOTUSD",
            "UNI": "UNIUSD",
            "MATIC": "MATICUSD",
        }

        kraken_symbol = kraken_symbol_map.get(symbol.upper())
        if not kraken_symbol:
            return None

        url = "https://api.kraken.com/0/public/Ticker"
        params = {"pair": kraken_symbol}

        with httpx.Client(timeout=5.0) as client:
            r = client.get(url, params=params)
            r.raise_for_status()
            data = r.json()
            result = data.get("result", {})
            if kraken_symbol in result:
                ticker = result[kraken_symbol]
                price = ticker.get("c", [0])[0]  # c[0] = last trade closed price
                return float(price)
            return None
    except Exception as e:
        print(f"‚ö†Ô∏è Kraken API –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
        return None


def get_price_from_okx(symbol: str, quote: str = "USD") -> float | None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Å OKX API –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫."""
    try:
        # OKX –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏–º–≤–æ–ª—ã —Å –¥–µ—Ñ–∏—Å–æ–º
        okx_symbol = f"{symbol.upper()}-USDT"
        url = "https://www.okx.com/api/v5/market/ticker"
        params = {"instId": okx_symbol}

        with httpx.Client(timeout=5.0) as client:
            r = client.get(url, params=params)
            r.raise_for_status()
            data = r.json()
            if data.get("code") == "0":
                tickers = data.get("data", [])
                if tickers:
                    ticker = tickers[0]
                    return float(ticker.get("last", 0))
            return None
    except Exception as e:
        print(f"‚ö†Ô∏è OKX API –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
        return None


def get_price_from_coinmarketcap(symbol: str, quote: str = "USD") -> float | None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Å CoinMarketCap API –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫."""
    try:
        # CoinMarketCap –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ID –º–æ–Ω–µ—Ç
        cmc_id_map = {
            "BTC": "1",
            "ETH": "1027",
            "LINK": "1975",
            "SOL": "5426",
            "ADA": "2010",
            "DOT": "6636",
            "UNI": "7083",
            "MATIC": "3890",
            "BNB": "1839",
            "XRP": "52",
            "USDT": "825",
            "USDC": "3408",
            "DOGE": "74",
            "TRX": "1958",
        }

        cmc_id = cmc_id_map.get(symbol.upper())
        if not cmc_id:
            return None

        url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest"
        params = {"id": cmc_id, "convert": quote.upper()}
        headers = {"X-CMC_PRO_API_KEY": "YOUR_API_KEY_HERE"}  # –ù—É–∂–µ–Ω API –∫–ª—é—á

        # –ü—Ä–æ–±—É–µ–º –±–µ–∑ API –∫–ª—é—á–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø)
        with httpx.Client(timeout=5.0) as client:
            r = client.get(url, params=params)
            if r.status_code == 200:
                data = r.json()
                if "data" in data and cmc_id in data["data"]:
                    quote_data = data["data"][cmc_id]["quote"][quote.upper()]
                    return float(quote_data["price"])
            return None
    except Exception as e:
        print(f"‚ö†Ô∏è CoinMarketCap API –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
        return None


def get_smart_rounded_price(price: float, symbol: str) -> float:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–º–Ω–æ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—É—é —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–º–≤–æ–ª–∞ –º–æ–Ω–µ—Ç—ã."""
    if not price or price <= 0:
        return 0.0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–Ω—ã
    if price >= 1000:
        # –î–ª—è –¥–æ—Ä–æ–≥–∏—Ö –º–æ–Ω–µ—Ç (BTC, ETH) - 2 –∑–Ω–∞–∫–∞
        return round(price, 2)
    elif price >= 100:
        # –î–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –º–æ–Ω–µ—Ç (LINK, SOL) - 2 –∑–Ω–∞–∫–∞
        return round(price, 2)
    elif price >= 1:
        # –î–ª—è –º–æ–Ω–µ—Ç $1-100 - 2 –∑–Ω–∞–∫–∞
        return round(price, 2)
    elif price >= 0.01:
        # –î–ª—è –¥–µ—à–µ–≤—ã—Ö –º–æ–Ω–µ—Ç $0.01-1 - 4 –∑–Ω–∞–∫–∞
        return round(price, 4)
    else:
        # –î–ª—è –æ—á–µ–Ω—å –¥–µ—à–µ–≤—ã—Ö –º–æ–Ω–µ—Ç <$0.01 - 6 –∑–Ω–∞–∫–æ–≤
        return round(price, 6)


def get_aggregated_price(symbol: str, quote: str = "USD") -> dict | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π."""
    if not symbol:
        return None

    sym = symbol.upper()
    q = quote.lower()
    key = (sym, q)
    now = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–∞–∫—Ç—É–∞–ª–µ–Ω 5 –º–∏–Ω—É—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
    if key in _cache and now - _cache[key][1] < 300:
        cached_price = _cache[key][0]
        return {
            "price": cached_price,
            "sources": ["–ö—ç—à"],
            "source_count": 1,
            "average_price": cached_price,
            "cached": True,
        }

    # –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    sources = [
        ("CoinGecko", lambda: get_current_price(sym, q)),
        ("Binance", lambda: get_price_from_binance(sym, q)),
        ("CoinPaprika", lambda: get_price_from_coinpaprika(sym, q)),
        ("Coinbase", lambda: get_price_from_coinbase(sym, q)),
        ("Kraken", lambda: get_price_from_kraken(sym, q)),
        ("OKX", lambda: get_price_from_okx(sym, q)),
        ("CoinMarketCap", lambda: get_price_from_coinmarketcap(sym, q)),
    ]

    prices = []
    working_sources = []

    # –£–±–∏—Ä–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    # print(f"üîç –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è {sym} –∏–∑ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")

    for source_name, source_func in sources:
        try:
            price = source_func()
            if price and price > 0:
                prices.append(price)
                working_sources.append(source_name)
                # print(f"‚úÖ {source_name}: ${price:,.2f}")
            else:
                # print(f"‚ö†Ô∏è {source_name}: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                pass
        except Exception as e:
            # print(f"‚ùå {source_name}: {e}")
            continue

    if not prices:
        # print(f"‚ùå –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è {sym}")
        return None

    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã–±—Ä–æ—Å—ã (—Ü–µ–Ω—ã, —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è –æ—Ç –º–µ–¥–∏–∞–Ω—ã)
    if len(prices) >= 3:
        median_price = sorted(prices)[len(prices) // 2]
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ü–µ–Ω—ã, –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 20% –æ—Ç –º–µ–¥–∏–∞–Ω—ã
        filtered_prices = [
            p for p in prices if abs(p - median_price) / median_price <= 0.2
        ]
        if filtered_prices:
            prices = filtered_prices
            # print(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(prices)} –∏–∑ {len(prices) + len(sources) - len(working_sources)} —Ü–µ–Ω")

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
    average_price = sum(prices) / len(prices)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
    rounded_price = get_smart_rounded_price(average_price, sym)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (–æ–∫—Ä—É–≥–ª—è–µ–º –¥–ª—è –∫—ç—à–∞ —Ç–æ–∂–µ)
    _cache[key] = (rounded_price, now)

    result = {
        "price": rounded_price,
        "sources": working_sources,
        "source_count": len(working_sources),
        "average_price": rounded_price,
        "cached": False,
        "price_range": {
            "min": get_smart_rounded_price(min(prices), sym),
            "max": get_smart_rounded_price(max(prices), sym),
            "spread": get_smart_rounded_price(max(prices) - min(prices), sym),
        },
    }

    # print(f"üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {sym}: ${average_price:,.2f} (–∏–∑ {len(working_sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)")
    return result


def get_current_price_fallback(symbol: str, quote: str = "USD") -> float | None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)."""
    result = get_aggregated_price(symbol, quote)
    return result["price"] if result else None


def get_current_price_with_retry(
    symbol: str, quote: str = "USD", max_retries: int = 3
) -> float | None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏.

    Args:
        symbol: –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        quote: –í–∞–ª—é—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫

    Returns:
        float | None: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    for attempt in range(max_retries):
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
            if attempt > 0:
                delay = random.uniform(1.0, 3.0) * (attempt + 1)
                print(
                    f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}, –∑–∞–¥–µ—Ä–∂–∫–∞ {delay:.1f}—Å..."
                )
                time.sleep(delay)

            price = get_current_price(symbol, quote)
            if price:
                return price

        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
            if attempt == max_retries - 1:
                print(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {symbol}")
                return None

    return None
