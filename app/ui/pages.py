from nicegui import ui
from app.core.services import (
    list_transactions, add_transaction, backup_database, positions_fifo,
    enrich_positions_with_market, export_transactions_csv, export_positions_csv,
    delete_transaction, get_transaction, update_transaction,
)
from app.core.models import TransactionIn
import os

CURRENCY = os.getenv('REPORT_CURRENCY', 'USD').upper()
TYPES = ['buy','sell','exchange_in','exchange_out','deposit','withdrawal']
STRATS = ['long','mid','short','scalp']

def table_row_with_actions(row):
    rid = int(row['id'])
    with ui.row().classes('gap-1'):
        ui.button('‚úèÔ∏è', on_click=lambda: open_edit_dialog(row)).props('flat size=sm').tooltip('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
        ui.button('üóëÔ∏è', on_click=lambda: (delete_transaction(rid), ui.notify('–£–¥–∞–ª–µ–Ω–æ', color='positive'), refresh())).props('flat size=sm').tooltip('–£–¥–∞–ª–∏—Ç—å')

def open_edit_dialog(row):
    data = get_transaction(int(row['id']))
    with ui.dialog() as dialog, ui.card().classes('min-w-[420px]'):
        ui.label(f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–¥–µ–ª–∫—É #{data["id"]}').classes('text-md font-bold')
        e_coin = ui.input('–ú–æ–Ω–µ—Ç–∞').props('uppercase'); e_coin.value = data['coin']
        e_type = ui.select(TYPES, label='–¢–∏–ø', value=data['type'])
        e_qty = ui.input('–ö–æ–ª-–≤–æ').props('type=number inputmode=decimal'); e_qty.value = str(data['quantity'])
        e_price = ui.input('–¶–µ–Ω–∞').props('type=number inputmode=decimal'); e_price.value = str(data['price'])
        e_strat = ui.select(STRATS, label='–°—Ç—Ä–∞—Ç–µ–≥–∏—è', value=data['strategy'])
        e_src = ui.input('–ò—Å—Ç–æ—á–Ω–∏–∫'); e_src.value = data.get('source') or ''
        e_notes = ui.input('–ó–∞–º–µ—Ç–∫–∏'); e_notes.value = data.get('notes') or ''
        with ui.row().classes('mt-2'):
            def save_changes():
                update_transaction(
                    data['id'],
                    TransactionIn(
                        coin=(e_coin.value or '').upper().strip(),
                        type=e_type.value,
                        quantity=float(e_qty.value or 0),
                        price=float(e_price.value or 0),
                        strategy=e_strat.value,
                        source=(e_src.value or '').strip(),
                        notes=(e_notes.value or '').strip(),
                    )
                )
                ui.notify('–°–¥–µ–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', color='positive')
                dialog.close(); refresh()
            ui.button('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', on_click=save_changes)
            ui.button('–û—Ç–º–µ–Ω–∞', on_click=dialog.close)
        dialog.open()

def portfolio_page():
    ui.label('–ü–æ—Ä—Ç—Ñ–µ–ª—å').classes('text-xl font-bold')

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    with ui.row().classes('gap-4 items-end'):
        coin_filter = ui.input('–§–∏–ª—å—Ç—Ä –ø–æ –º–æ–Ω–µ—Ç–µ').props('uppercase autocomplete=off autocorrect=off autocapitalize=off spellcheck=false')
        strat_filter = ui.select(['(–≤—Å–µ)'] + STRATS, value='(–≤—Å–µ)', label='–°—Ç—Ä–∞—Ç–µ–≥–∏—è')
        def reset_filters():
            coin_filter.value = ''
            strat_filter.value = '(–≤—Å–µ)'
            refresh()
        ui.button('–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', on_click=reset_filters)

    # –í–∫–ª–∞–¥–∫–∏
    tabs = ui.tabs().classes('mt-2')
    with ui.tab_panels(tabs, value='overview'):
        with ui.tab_panel('overview'):
            ui.label('–û–±–∑–æ—Ä').classes('text-lg font-bold')
            # –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
            with ui.row().classes('gap-4'):
                total_value_chip = ui.chip('–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚Äî')
                total_unreal_chip = ui.chip('–ù–µ—Ä–µ–∞–ª–∏–∑. PnL: ‚Äî')
                total_real_chip = ui.chip('–†–µ–∞–ª–∏–∑. PnL: ‚Äî')
            # –ø–æ–∑–∏—Ü–∏–∏ —Å–Ω–∏–∑—É
            ui.label('–ü–æ–∑–∏—Ü–∏–∏ (FIFO, —Ü–µ–Ω—ã CoinGecko)').classes('text-md mt-2')
            pos_cols = [
                {'name':'coin','label':'–ú–æ–Ω–µ—Ç–∞','field':'coin'},
                {'name':'strategy','label':'–°—Ç—Ä–∞—Ç–µ–≥–∏—è','field':'strategy'},
                {'name':'quantity','label':'–ö–æ–ª-–≤–æ','field':'quantity'},
                {'name':'avg_cost','label':'–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞','field':'avg_cost'},
                {'name':'price','label':f'–¶–µ–Ω–∞ ({CURRENCY})','field':'price'},
                {'name':'value','label':'–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å','field':'value'},
                {'name':'unreal_pnl','label':'–ù–µ—Ä–µ–∞–ª–∏–∑. PnL','field':'unreal_pnl'},
                {'name':'unreal_pct','label':'–ù–µ—Ä–µ–∞–ª–∏–∑. %','field':'unreal_pct'},
                {'name':'realized','label':'–†–µ–∞–ª–∏–∑. PnL','field':'realized'},
            ]
            pos_table1 = ui.table(columns=pos_cols, rows=[], row_key='key').classes('w-full mt-2')

        with ui.tab_panel('positions'):
            ui.label('–ü–æ–∑–∏—Ü–∏–∏').classes('text-lg font-bold')
            pos_table2 = ui.table(columns=pos_cols, rows=[], row_key='key').classes('w-full mt-2')
            with ui.row().classes('mt-2'):
                ui.button('–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–π (CSV)', on_click=lambda: export_pos())

        with ui.tab_panel('transactions'):
            ui.label('–°–¥–µ–ª–∫–∏').classes('text-lg font-bold')
            # —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            with ui.card().classes('w-full max-w-2xl'):
                ui.label('–î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É').classes('text-md')
                coin = ui.input('–ú–æ–Ω–µ—Ç–∞ (BTC, ETH, ...)').props('uppercase autocomplete=off autocorrect=off autocapitalize=off spellcheck=false')
                ttype = ui.select(TYPES, label='–¢–∏–ø', value='buy')
                qty = ui.input('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ').props('type=number inputmode=decimal autocomplete=off')
                price = ui.input('–¶–µ–Ω–∞ –∑–∞ –º–æ–Ω–µ—Ç—É').props('type=number inputmode=decimal autocomplete=off')
                strategy = ui.select(STRATS, label='–°—Ç—Ä–∞—Ç–µ–≥–∏—è', value='long')
                source = ui.input('–ò—Å—Ç–æ—á–Ω–∏–∫ (–±–∏—Ä–∂–∞/–∫–æ—à–µ–ª–µ–∫)').props('autocomplete=off')
                notes = ui.input('–ó–∞–º–µ—Ç–∫–∏').props('autocomplete=off')
                def on_add():
                    try:
                        data = TransactionIn(
                            coin=(coin.value or '').upper().strip(),
                            type=ttype.value, quantity=float(qty.value or 0),
                            price=float(price.value or 0), strategy=strategy.value,
                            source=(source.value or '').strip(), notes=(notes.value or '').strip()
                        )
                        add_transaction(data); ui.notify('–°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', color='positive'); refresh()
                    except Exception as e:
                        ui.notify(f'–û—à–∏–±–∫–∞: {e}', color='negative')
                ui.button('–î–æ–±–∞–≤–∏—Ç—å', on_click=on_add).classes('mt-2')

            # —Ç–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫ —Å —ç–∫—à–µ–Ω–∞–º–∏
            cols = [
                {'name':'id','label':'ID','field':'id'},
                {'name':'coin','label':'–ú–æ–Ω–µ—Ç–∞','field':'coin'},
                {'name':'type','label':'–¢–∏–ø','field':'type'},
                {'name':'quantity','label':'–ö–æ–ª-–≤–æ','field':'quantity'},
                {'name':'price','label':'–¶–µ–Ω–∞','field':'price'},
                {'name':'ts_local','label':'–î–∞—Ç–∞/–≤—Ä–µ–º—è','field':'ts_local'},
                {'name':'strategy','label':'–°—Ç—Ä–∞—Ç–µ–≥–∏—è','field':'strategy'},
                {'name':'source','label':'–ò—Å—Ç–æ—á–Ω–∏–∫','field':'source'},
                {'name':'notes','label':'–ó–∞–º–µ—Ç–∫–∏','field':'notes'},
                {'name':'actions','label':'–î–µ–π—Å—Ç–≤–∏—è','field':'actions'},
            ]
            tx_table = ui.table(columns=cols, rows=[], row_key='id').classes('w-full mt-2')


            tx_table.add_slot('body-cell-actions', table_row_with_actions)

            with ui.row().classes('mt-2'):
                ui.button('–≠–∫—Å–ø–æ—Ä—Ç —Å–¥–µ–ª–æ–∫ (CSV)', on_click=lambda: export_tx())

        with ui.tab_panel('alerts'):
            ui.label('–ê–ª–µ—Ä—Ç—ã (—Å–∫–æ—Ä–æ)').classes('text-lg')

        with ui.tab_panel('analytics'):
            ui.label('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (—Å–∫–æ—Ä–æ ‚Äî –≥—Ä–∞—Ñ–∏–∫–∏, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π PnL)').classes('text-lg')

    # –≠–∫—Å–ø–æ—Ä—Ç-helpers
    def export_tx():
        path = export_transactions_csv(); ui.notify(f'–≠–∫—Å–ø–æ—Ä—Ç —Å–¥–µ–ª–æ–∫: {path}', color='positive')
    def export_pos():
        base = positions_fifo()
        base = apply_filters_positions(base, coin_filter.value, strat_filter.value)
        enriched, _ = enrich_positions_with_market(base, quote=CURRENCY)
        path = export_positions_csv(enriched); ui.notify(f'–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–π: {path}', color='positive')

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    def apply_filters_tx(rows, coin_val, strat_val):
        coin_val = (coin_val or '').upper().strip()
        filtered = []
        for r in rows:
            if coin_val and r['coin'] != coin_val:
                continue
            if strat_val != '(–≤—Å–µ)' and r['strategy'] != strat_val:
                continue
            filtered.append(r)
        return filtered

    def apply_filters_positions(rows, coin_val, strat_val):
        coin_val = (coin_val or '').upper().strip()
        out = []
        for r in rows:
            if coin_val and r['coin'] != coin_val:
                continue
            if strat_val != '(–≤—Å–µ)' and r['strategy'] != strat_val:
                continue
            out.append(r)
        return out

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
    def refresh():
        # –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ–±–∑–æ—Ä–∞ –∏ –≤–∫–ª–∞–¥–∫–∏ ¬´–ø–æ–∑–∏—Ü–∏–∏¬ª
        base_positions = positions_fifo()
        base_filtered = apply_filters_positions(base_positions, coin_filter.value, strat_filter.value)
        enriched, totals = enrich_positions_with_market(base_filtered, quote=CURRENCY)
        pos_table1.rows = enriched; pos_table1.update()
        pos_table2.rows = enriched; pos_table2.update()

        # —Å–≤–æ–¥–∫–∞
        total_value_chip.text = f'–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {totals["total_value"]:.2f} {CURRENCY}'
        total_unreal_chip.text = f'–ù–µ—Ä–µ–∞–ª–∏–∑. PnL: {totals["total_unreal"]:+.2f} {CURRENCY} ({totals["total_unreal_pct"]:+.2f}%)'
        total_real_chip.text = f'–†–µ–∞–ª–∏–∑. PnL: {totals["total_realized"]:+.2f} {CURRENCY}'

        # —Å–¥–µ–ª–∫–∏
        rows = list_transactions()
        rows = apply_filters_tx(rows, coin_filter.value, strat_filter.value)
        tx_table.rows = rows; tx_table.update()

    refresh()
