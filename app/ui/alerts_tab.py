"""
UI –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤
"""

from datetime import datetime

from nicegui import ui

from app.core.services import get_portfolio_stats
from app.models.alert_models import AlertRuleIn, AlertRuleUpdate, AlertStatus, AlertType
from app.services.alert_exporter import AlertExporter
from app.services.alert_service import AlertService

alert_service = AlertService()
alert_exporter = AlertExporter()


def get_portfolio_symbols():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    try:
        stats = get_portfolio_stats()
        symbols = set()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        for position in stats.get("positions", []):
            if position.get("symbol"):
                symbols.add(position["symbol"].upper())

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ü–∏–π –∏–∑ StockService

        return sorted(list(symbols))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        return []


def get_popular_symbols():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    return [
        "BTC",
        "ETH",
        "BNB",
        "ADA",
        "SOL",
        "DOT",
        "MATIC",
        "AVAX",
        "SBER",
        "GAZP",
        "LKOH",
        "YNDX",
        "NVTK",
        "AFLT",
        "QIWI",
    ]


def create_alerts_tab():
    """–°–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫—É —Å –∞–ª–µ—Ä—Ç–∞–º–∏"""

    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
    alerts_container = ui.column().classes("w-full")

    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
    triggers_container = ui.column().classes("w-full")

    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications_container = ui.column().classes("w-full")

    def refresh_alerts():
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤"""
        alerts_container.clear()
        load_alerts()

    def load_notifications():
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        with notifications_container:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            ui.label("üîî –ê–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è").classes(
                "text-2xl font-bold mb-4 text-gray-800"
            )

            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
            triggers = alert_service.get_alert_triggers(is_read=False, limit=10)

            if not triggers:
                ui.label("–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π").classes("text-gray-500 italic")
                return

            # –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            for trigger in triggers:
                create_notification_card(trigger)

    def create_notification_card(trigger):
        """–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        with ui.card().classes("w-full mb-3 p-4 bg-blue-50 border-l-4 border-blue-400"):
            with ui.row().classes("w-full items-center"):
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                with ui.column().classes("flex-1"):
                    # –°–∏–º–≤–æ–ª –∏ –≤—Ä–µ–º—è
                    with ui.row().classes("items-center gap-2 mb-2"):
                        ui.label(f"üîî {trigger.symbol}").classes(
                            "text-lg font-bold text-blue-600"
                        )
                        ui.label(
                            trigger.triggered_at.strftime("%d.%m.%Y %H:%M:%S")
                        ).classes("text-sm text-gray-500")

                    # –¶–µ–Ω—ã
                    ui.label(
                        f"–¶–µ–Ω–∞: {trigger.current_price} | –ü–æ—Ä–æ–≥: {trigger.threshold_value}"
                    ).classes("text-sm font-medium")

                    # –°–æ–æ–±—â–µ–Ω–∏–µ
                    if trigger.message:
                        ui.label(trigger.message).classes("text-sm text-gray-700 mt-1")

                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                with ui.column().classes("gap-2"):
                    # –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                    ui.button(
                        "‚úÖ", on_click=lambda t=trigger: mark_notification_read(t)
                    ).classes("text-sm bg-green-500 text-white")

                    # –ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–ª–µ—Ä—Ç—É
                    ui.button(
                        "üëÅÔ∏è", on_click=lambda t=trigger: view_alert_details(t)
                    ).classes("text-sm bg-blue-500 text-white")

    def mark_notification_read(trigger):
        """–û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
        try:
            alert_service.mark_trigger_as_read(trigger.id)
            ui.notify("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ", type="positive")
            refresh_notifications()
        except Exception as e:
            ui.notify(f"–û—à–∏–±–∫–∞: {e}", type="negative")

    def view_alert_details(trigger):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∞–ª–µ—Ä—Ç–∞"""
        try:
            alert_rule = alert_service.get_alert_rule(trigger.alert_rule_id)
            if alert_rule:
                ui.notify(
                    f"–ê–ª–µ—Ä—Ç: {alert_rule.symbol} {alert_rule.alert_type.value} {alert_rule.threshold_value}",
                    type="info",
                )
        except Exception as e:
            ui.notify(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {e}", type="negative")

    def refresh_notifications():
        """–û–±–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        notifications_container.clear()
        load_notifications()

    def refresh_triggers():
        """–û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π"""
        triggers_container.clear()
        load_triggers()

    def load_alerts():
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤"""
        with alerts_container:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            ui.label("üîî –ü—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–æ–≤").classes(
                "text-2xl font-bold mb-4 text-gray-800"
            )

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            with ui.row().classes("w-full mb-4 gap-2"):
                ui.button(
                    "‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç", icon="add", on_click=open_create_alert_dialog
                ).classes("bg-blue-500 text-white")
                ui.button(
                    "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", icon="refresh", on_click=refresh_alerts
                ).classes("bg-gray-500 text-white")
                ui.button(
                    "üì§ –≠–∫—Å–ø–æ—Ä—Ç", icon="download", on_click=open_export_dialog
                ).classes("bg-green-500 text-white")
                ui.button(
                    "üì• –ò–º–ø–æ—Ä—Ç", icon="upload", on_click=open_import_dialog
                ).classes("bg-purple-500 text-white")

            # –ü–æ–ª—É—á–∞–µ–º –∞–ª–µ—Ä—Ç—ã
            alerts = alert_service.get_alert_rules()

            if not alerts:
                ui.label("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤").classes("text-gray-500 italic")
                return

            # –°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤
            for alert in alerts:
                create_alert_card(alert)

    def load_triggers():
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π"""
        with triggers_container:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            ui.label("üìä –ò—Å—Ç–æ—Ä–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π").classes(
                "text-2xl font-bold mb-4 text-gray-800"
            )

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            with ui.row().classes("w-full mb-4 gap-2"):
                ui.button(
                    "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", icon="refresh", on_click=refresh_triggers
                ).classes("bg-gray-500 text-white")
                ui.button(
                    "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ",
                    icon="done",
                    on_click=mark_all_read,
                ).classes("bg-green-500 text-white")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
            triggers = alert_service.get_alert_triggers(limit=50)

            if not triggers:
                ui.label("–ù–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π").classes("text-gray-500 italic")
                return

            # –°–ø–∏—Å–æ–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
            for trigger in triggers:
                create_trigger_card(trigger)

    def create_alert_card(alert):
        """–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∞–ª–µ—Ä—Ç–∞"""
        with ui.card().classes("w-full mb-3 p-4"):
            with ui.row().classes("w-full items-center"):
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                with ui.column().classes("flex-1"):
                    # –°–∏–º–≤–æ–ª –∏ —Ç–∏–ø
                    with ui.row().classes("items-center gap-2 mb-2"):
                        ui.label(f"üìà {alert.symbol}").classes(
                            "text-lg font-bold text-blue-600"
                        )

                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞ –≤ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                        alert_type_names = {
                            AlertType.PRICE_ABOVE: "–¶–µ–Ω–∞ –≤—ã—à–µ",
                            AlertType.PRICE_BELOW: "–¶–µ–Ω–∞ –Ω–∏–∂–µ",
                            AlertType.PRICE_CHANGE_PERCENT: "–ò–∑–º–µ–Ω–µ–Ω–∏–µ %",
                        }
                        alert_type_name = alert_type_names.get(
                            alert.alert_type, alert.alert_type.value
                        )

                        ui.label(f"[{alert_type_name}]").classes(
                            "text-sm bg-blue-100 text-blue-800 px-2 py-1 rounded"
                        )

                        # –°—Ç–∞—Ç—É—Å
                        status_color = {
                            AlertStatus.ACTIVE: "bg-green-100 text-green-800",
                            AlertStatus.PAUSED: "bg-yellow-100 text-yellow-800",
                            AlertStatus.TRIGGERED: "bg-red-100 text-red-800",
                            AlertStatus.EXPIRED: "bg-gray-100 text-gray-800",
                        }
                        ui.label(alert.status.value).classes(
                            f"text-xs px-2 py-1 rounded {status_color.get(alert.status, 'bg-gray-100')}"
                        )

                    # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    ui.label(f"–ü–æ—Ä–æ–≥: {alert.threshold_value}").classes(
                        "text-sm text-gray-600"
                    )

                    # –°–æ–æ–±—â–µ–Ω–∏–µ
                    if alert.message:
                        ui.label(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {alert.message}").classes(
                            "text-sm text-gray-600"
                        )

                    # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
                    ui.label(
                        f"–°–æ–∑–¥–∞–Ω: {alert.created_at.strftime('%d.%m.%Y %H:%M')}"
                    ).classes("text-xs text-gray-500")

                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                with ui.column().classes("gap-2"):
                    # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                    toggle_text = "‚è∏Ô∏è" if alert.is_active else "‚ñ∂Ô∏è"
                    ui.button(
                        toggle_text, on_click=lambda a=alert: toggle_alert(a)
                    ).classes("text-sm")

                    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    ui.button(
                        "‚úèÔ∏è", on_click=lambda a=alert: open_edit_alert_dialog(a)
                    ).classes("text-sm")

                    # –£–¥–∞–ª–∏—Ç—å
                    ui.button("üóëÔ∏è", on_click=lambda a=alert: delete_alert(a)).classes(
                        "text-sm text-red-600"
                    )

    def create_trigger_card(trigger):
        """–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è"""
        read_class = "" if trigger.is_read else "bg-blue-50 border-l-4 border-blue-400"

        with ui.card().classes(f"w-full mb-2 p-3 {read_class}"):
            with ui.row().classes("w-full items-center"):
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                with ui.column().classes("flex-1"):
                    # –°–∏–º–≤–æ–ª –∏ –≤—Ä–µ–º—è
                    with ui.row().classes("items-center gap-2 mb-1"):
                        ui.label(f"üìà {trigger.symbol}").classes(
                            "font-bold text-blue-600"
                        )
                        ui.label(
                            trigger.triggered_at.strftime("%d.%m.%Y %H:%M:%S")
                        ).classes("text-sm text-gray-500")

                    # –¶–µ–Ω—ã
                    ui.label(
                        f"–¶–µ–Ω–∞: {trigger.current_price} | –ü–æ—Ä–æ–≥: {trigger.threshold_value}"
                    ).classes("text-sm")

                    # –°–æ–æ–±—â–µ–Ω–∏–µ
                    if trigger.message:
                        ui.label(trigger.message).classes("text-sm text-gray-600")

                # –ö–Ω–æ–ø–∫–∞ "–ø—Ä–æ—á–∏—Ç–∞–Ω–æ"
                if not trigger.is_read:
                    ui.button(
                        "‚úÖ", on_click=lambda t=trigger: mark_trigger_read(t)
                    ).classes("text-sm")

    def open_create_alert_dialog():
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"""
        with ui.dialog() as dialog, ui.card().classes(
            "w-[800px] max-w-[90vw] max-h-[85vh] p-4"
        ):
            ui.label("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–ª–µ—Ä—Ç").classes("text-xl font-bold mb-3")

            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            with ui.column().classes("w-full overflow-y-auto"):
                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
                portfolio_symbols = get_portfolio_symbols()
                popular_symbols = get_popular_symbols()

                # –°–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ (–Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É)
                with ui.row().classes("w-full mb-2"):
                    with ui.column().classes("w-full"):
                        with ui.row().classes("items-center gap-2"):
                            ui.label("–°–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞").classes("text-sm font-medium")
                            ui.icon("help_outline").tooltip(
                                "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞ (BTC, ETH, SBER)"
                            )
                        symbol_input = (
                            ui.input(placeholder="BTC, ETH, SBER")
                            .classes("w-full")
                            .props("dense outlined")
                        )

                # –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ - –∫–æ–º–ø–∞–∫—Ç–Ω–æ
                with ui.column().classes("w-full mb-2"):
                    ui.label("–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:").classes("text-sm font-medium mb-1")

                    # –°–∏–º–≤–æ–ª—ã –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                    if portfolio_symbols:
                        with ui.row().classes("flex-wrap gap-1 mb-1"):
                            ui.label("–ü–æ—Ä—Ç—Ñ–µ–ª—å:").classes("text-xs text-gray-500")
                            for symbol in portfolio_symbols[:8]:
                                ui.button(
                                    symbol,
                                    on_click=lambda s=symbol: symbol_input.set_value(s),
                                ).classes(
                                    "text-xs px-1 py-0 bg-blue-100 hover:bg-blue-200"
                                )

                    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                    with ui.row().classes("flex-wrap gap-1"):
                        ui.label("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ:").classes("text-xs text-gray-500")
                        for symbol in popular_symbols[:8]:
                            ui.button(
                                symbol,
                                on_click=lambda s=symbol: symbol_input.set_value(s),
                            ).classes("text-xs px-1 py-0 bg-gray-100 hover:bg-gray-200")

                # –î–≤—É—Ö–∫–æ–ª–æ–Ω–æ—á–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ –ø–æ–ª–µ–π
                with ui.row().classes("grid grid-cols-2 gap-3 w-full mb-2"):
                    # –¢–∏–ø –∞–ª–µ—Ä—Ç–∞ (–∫–æ–ª–æ–Ω–∫–∞ 1)
                    with ui.column().classes("w-full"):
                        with ui.row().classes("items-center gap-2"):
                            ui.label("–¢–∏–ø –∞–ª–µ—Ä—Ç–∞").classes("text-sm font-medium")
                            ui.icon("help_outline").tooltip(
                                "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"
                            )
                        alert_type_select = (
                            ui.select(
                                [
                                    "–¶–µ–Ω–∞ –≤—ã—à–µ",
                                    "–¶–µ–Ω–∞ –Ω–∏–∂–µ",
                                    "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ %",
                                ],
                                value="–¶–µ–Ω–∞ –≤—ã—à–µ",
                            )
                            .classes("w-full")
                            .props("dense outlined")
                        )

                    # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–∫–æ–ª–æ–Ω–∫–∞ 2)
                    with ui.column().classes("w-full"):
                        with ui.row().classes("items-center gap-2"):
                            ui.label("–ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ").classes(
                                "text-sm font-medium"
                            )
                            ui.icon("help_outline").tooltip(
                                "–¶–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è"
                            )
                        threshold_input = (
                            ui.number("", value=0.0, min=0)
                            .classes("w-full")
                            .props("dense outlined")
                        )

                # –ö—É–ª–µ—Ä–¥–∞—É–Ω –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                with ui.row().classes("grid grid-cols-2 gap-3 w-full mb-2"):
                    # –ö—É–ª–µ—Ä–¥–∞—É–Ω (–∫–æ–ª–æ–Ω–∫–∞ 1)
                    with ui.column().classes("w-full"):
                        with ui.row().classes("items-center gap-2"):
                            ui.label("–ö—É–ª–µ—Ä–¥–∞—É–Ω (–º–∏–Ω)").classes("text-sm font-medium")
                            ui.icon("help_outline").tooltip(
                                "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ–º"
                            )
                        cooldown_input = (
                            ui.number("", value=60, min=1)
                            .classes("w-full")
                            .props("dense outlined")
                        )

                    # –°–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ–ª–æ–Ω–∫–∞ 2, –Ω–æ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É)
                    with ui.column().classes("col-span-2"):
                        with ui.row().classes("items-center gap-2"):
                            ui.label("–°–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)").classes(
                                "text-sm font-medium"
                            )
                            ui.icon("help_outline").tooltip(
                                "–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏"
                            )
                        message_input = (
                            ui.textarea(placeholder="–ê–ª–µ—Ä—Ç —Å—Ä–∞–±–æ—Ç–∞–ª!")
                            .classes("w-full")
                            .props("dense outlined auto-grow")
                        )

                # –ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã - –∫–æ–º–ø–∞–∫—Ç–Ω–æ
                with ui.column().classes("w-full mb-2"):
                    ui.label("–ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã:").classes("text-sm font-medium mb-1")
                    with ui.row().classes("flex-wrap gap-1"):
                        ui.button(
                            "Bitcoin $50k+",
                            on_click=lambda: apply_template(
                                "BTC", "–¶–µ–Ω–∞ –≤—ã—à–µ", 50000, "Bitcoin –¥–æ—Å—Ç–∏–≥ $50,000!"
                            ),
                        ).classes("text-xs px-1 py-0 bg-orange-100 hover:bg-orange-200")

                        ui.button(
                            "Ethereum $3k+",
                            on_click=lambda: apply_template(
                                "ETH", "–¶–µ–Ω–∞ –≤—ã—à–µ", 3000, "Ethereum –¥–æ—Å—Ç–∏–≥ $3,000!"
                            ),
                        ).classes("text-xs px-1 py-0 bg-blue-100 hover:bg-blue-200")

                        ui.button(
                            "SBER $200+",
                            on_click=lambda: apply_template(
                                "SBER", "–¶–µ–Ω–∞ –≤—ã—à–µ", 200, "–°–±–µ—Ä–±–∞–Ω–∫ –¥–æ—Å—Ç–∏–≥ 200‚ÇΩ!"
                            ),
                        ).classes("text-xs px-1 py-0 bg-green-100 hover:bg-green-200")

            def apply_template(symbol, alert_type_str, threshold, message):
                """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –∞–ª–µ—Ä—Ç–∞"""
                symbol_input.set_value(symbol)
                alert_type_select.set_value(alert_type_str)
                threshold_input.set_value(threshold)
                message_input.set_value(message)

            # –õ–∏–ø–∫–∞—è –ø–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π –≤–Ω–∏–∑—É
            with ui.row().classes("w-full gap-2 mt-2 sticky bottom-0 bg-white pt-2"):
                ui.button("–°–æ–∑–¥–∞—Ç—å", on_click=lambda: create_alert()).classes(
                    "bg-blue-500 text-white flex-1"
                )
                ui.button("–û—Ç–º–µ–Ω–∞", on_click=dialog.close).classes(
                    "bg-gray-500 text-white flex-1"
                )

            def create_alert():
                try:
                    if not symbol_input.value.strip():
                        ui.notify("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞", type="negative")
                        return

                    if threshold_input.value <= 0:
                        ui.notify(
                            "–ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0", type="negative"
                        )
                        return

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ enum
                    alert_type_mapping = {
                        "–¶–µ–Ω–∞ –≤—ã—à–µ": AlertType.PRICE_ABOVE,
                        "–¶–µ–Ω–∞ –Ω–∏–∂–µ": AlertType.PRICE_BELOW,
                        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ %": AlertType.PRICE_CHANGE_PERCENT,
                    }

                    alert_type = alert_type_mapping.get(alert_type_select.value)
                    if not alert_type:
                        ui.notify("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞", type="negative")
                        return

                    alert_data = AlertRuleIn(
                        symbol=symbol_input.value.strip().upper(),
                        alert_type=alert_type,
                        threshold_value=threshold_input.value,
                        message=message_input.value or None,
                        cooldown_minutes=int(cooldown_input.value),
                    )

                    alert_service.create_alert_rule(alert_data)
                    ui.notify("–ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!", type="positive")
                    dialog.close()
                    refresh_alerts()

                except Exception as e:
                    ui.notify(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}", type="negative")

        dialog.open()

    def open_edit_alert_dialog(alert):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"""
        with ui.dialog() as dialog, ui.card().classes("w-96 p-6"):
            ui.label("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–ª–µ—Ä—Ç").classes("text-xl font-bold mb-4")

            # –§–æ—Ä–º–∞
            threshold_input = ui.number(
                "–ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", value=alert.threshold_value
            ).classes("w-full mb-3")
            message_input = ui.input("–°–æ–æ–±—â–µ–Ω–∏–µ", value=alert.message or "").classes(
                "w-full mb-3"
            )
            cooldown_input = ui.number(
                "–ö—É–ª–µ—Ä–¥–∞—É–Ω (–º–∏–Ω—É—Ç—ã)", value=alert.cooldown_minutes
            ).classes("w-full mb-3")

            is_active_checkbox = ui.checkbox("–ê–∫—Ç–∏–≤–µ–Ω", value=alert.is_active).classes(
                "w-full mb-3"
            )

            with ui.row().classes("w-full gap-2"):
                ui.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", on_click=lambda: update_alert()).classes(
                    "bg-blue-500 text-white flex-1"
                )
                ui.button("–û—Ç–º–µ–Ω–∞", on_click=dialog.close).classes(
                    "bg-gray-500 text-white flex-1"
                )

            def update_alert():
                try:
                    update_data = AlertRuleUpdate(
                        threshold_value=threshold_input.value,
                        message=message_input.value or None,
                        cooldown_minutes=int(cooldown_input.value),
                        is_active=is_active_checkbox.value,
                    )

                    alert_service.update_alert_rule(alert.id, update_data)
                    ui.notify("–ê–ª–µ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!", type="positive")
                    dialog.close()
                    refresh_alerts()

                except Exception as e:
                    ui.notify(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}", type="negative")

        dialog.open()

    def toggle_alert(alert):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–ª–µ—Ä—Ç–∞"""
        try:
            alert_service.toggle_alert_rule(alert.id)
            ui.notify("–°—Ç–∞—Ç—É—Å –∞–ª–µ—Ä—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω", type="positive")
            refresh_alerts()
        except Exception as e:
            ui.notify(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}", type="negative")

    def delete_alert(alert):
        """–£–¥–∞–ª–∏—Ç—å –∞–ª–µ—Ä—Ç"""
        try:
            alert_service.delete_alert_rule(alert.id)
            ui.notify("–ê–ª–µ—Ä—Ç —É–¥–∞–ª–µ–Ω", type="positive")
            refresh_alerts()
        except Exception as e:
            ui.notify(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}", type="negative")

    def mark_trigger_read(trigger):
        """–û—Ç–º–µ—Ç–∏—Ç—å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
        try:
            alert_service.mark_trigger_as_read(trigger.id)
            ui.notify("–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ", type="positive")
            refresh_triggers()
        except Exception as e:
            ui.notify(f"–û—à–∏–±–∫–∞: {e}", type="negative")

    def mark_all_read():
        """–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"""
        try:
            count = alert_service.mark_all_triggers_as_read()
            ui.notify(f"–û—Ç–º–µ—á–µ–Ω–æ {count} —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ", type="positive")
            refresh_triggers()
        except Exception as e:
            ui.notify(f"–û—à–∏–±–∫–∞: {e}", type="negative")

    def open_export_dialog():
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        with ui.dialog() as dialog, ui.card().classes("w-96 p-6"):
            ui.label("–≠–∫—Å–ø–æ—Ä—Ç –∞–ª–µ—Ä—Ç–æ–≤").classes("text-xl font-bold mb-4")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–ª–µ—Ä—Ç—ã
            alerts = alert_service.get_alert_rules()

            if not alerts:
                ui.label("–ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞").classes("text-gray-500")
                ui.button("–ó–∞–∫—Ä—ã—Ç—å", on_click=dialog.close).classes(
                    "bg-gray-500 text-white"
                )
                dialog.open()
                return

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            stats = alert_exporter.get_export_stats(alerts)

            ui.label(f"–ë—É–¥–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {stats['total_alerts']} –∞–ª–µ—Ä—Ç–æ–≤:").classes(
                "text-sm mb-2"
            )
            ui.label(f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_alerts']}").classes(
                "text-xs text-gray-600"
            )
            ui.label(f"‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {stats['crypto_alerts']}").classes(
                "text-xs text-gray-600"
            )
            ui.label(f"‚Ä¢ –ê–∫—Ü–∏–∏: {stats['stock_alerts']}").classes(
                "text-xs text-gray-600"
            )

            # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
            format_select = ui.select(
                ["JSON (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", "CSV"],
                value="JSON (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
                label="–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞",
            ).classes("w-full mb-4")

            with ui.row().classes("w-full gap-2"):
                ui.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", on_click=lambda: export_alerts()).classes(
                    "bg-green-500 text-white flex-1"
                )
                ui.button("–û—Ç–º–µ–Ω–∞", on_click=dialog.close).classes(
                    "bg-gray-500 text-white flex-1"
                )

            def export_alerts():
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç
                    format_mapping = {"JSON (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)": "json", "CSV": "csv"}

                    export_format = format_mapping.get(format_select.value, "json")

                    if export_format == "json":
                        data = alert_exporter.export_alerts_to_json(alerts)
                        filename = f"alerts_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                    else:
                        data = alert_exporter.export_alerts_to_csv(alerts)
                        filename = f"alerts_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"

                    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    ui.download(data, filename, "application/octet-stream")
                    ui.notify(f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {filename}", type="positive")
                    dialog.close()

                except Exception as e:
                    ui.notify(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}", type="negative")

        dialog.open()

    def open_import_dialog():
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –∏–º–ø–æ—Ä—Ç–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        with ui.dialog() as dialog, ui.card().classes("w-96 p-6"):
            ui.label("–ò–º–ø–æ—Ä—Ç –∞–ª–µ—Ä—Ç–æ–≤").classes("text-xl font-bold mb-4")

            ui.label("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:").classes("text-sm mb-4")

            # –ü–æ–ª–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
            ui.upload(
                on_upload=lambda e: handle_file_upload(e),
                max_file_size=1024 * 1024,  # 1MB
            ).classes("w-full mb-4")

            ui.label("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JSON, CSV").classes(
                "text-xs text-gray-500 mb-4"
            )

            with ui.row().classes("w-full gap-2"):
                ui.button("–û—Ç–º–µ–Ω–∞", on_click=dialog.close).classes(
                    "bg-gray-500 text-white flex-1"
                )

            def handle_file_upload(e):
                try:
                    file_content = e.content.read().decode("utf-8")

                    if e.name.endswith(".json"):
                        imported_alerts = alert_exporter.import_alerts_from_json(
                            file_content
                        )
                    elif e.name.endswith(".csv"):
                        ui.notify("–ò–º–ø–æ—Ä—Ç CSV –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", type="warning")
                        return
                    else:
                        ui.notify("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞", type="negative")
                        return

                    ui.notify(
                        f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(imported_alerts)} –∞–ª–µ—Ä—Ç–æ–≤", type="positive"
                    )
                    dialog.close()
                    refresh_alerts()

                except Exception as e:
                    ui.notify(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}", type="negative")

        dialog.open()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã
    with ui.tabs().classes("w-full") as tabs:
        notifications_tab = ui.tab("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        alerts_tab = ui.tab("üìã –ê–ª–µ—Ä—Ç—ã")
        triggers_tab = ui.tab("üìä –ò—Å—Ç–æ—Ä–∏—è")

    with ui.tab_panels(tabs, value=notifications_tab).classes("w-full"):
        with ui.tab_panel(notifications_tab):
            load_notifications()

        with ui.tab_panel(alerts_tab):
            load_alerts()

        with ui.tab_panel(triggers_tab):
            load_triggers()

    return alerts_container
