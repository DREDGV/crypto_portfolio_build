"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏
"""

import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import pandas as pd
from datetime import datetime, timedelta
from nicegui import ui
from app.core.services import list_transactions, get_portfolio_stats, positions_fifo
from app.adapters.prices import get_current_price


def create_advanced_analytics_tab():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    with ui.column().classes("w-full h-full overflow-y-auto p-4"):
        ui.label("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞").classes("text-2xl font-bold text-gray-800 mb-4")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        with ui.row().classes("gap-3 mb-4"):
            ui.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", icon="refresh").classes("bg-blue-500 text-white").on("click", lambda: refresh_all_charts())
            ui.button("üìà P&L –ø–æ –≤—Ä–µ–º–µ–Ω–∏", icon="trending_up").classes("bg-green-500 text-white").on("click", lambda: show_pnl_chart())
            ui.button("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è", icon="pie_chart").classes("bg-purple-500 text-white").on("click", lambda: show_portfolio_distribution())
            ui.button("üìâ –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏", icon="show_chart").classes("bg-orange-500 text-white").on("click", lambda: show_volatility_analysis())
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        charts_container = ui.column().classes("w-full")
        
        def refresh_all_charts():
            """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏"""
            charts_container.clear()
            with charts_container:
                create_pnl_timeline_chart()
                create_portfolio_distribution_chart()
                create_volatility_analysis_chart()
        
        def show_pnl_chart():
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ P&L –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
            charts_container.clear()
            with charts_container:
                create_pnl_timeline_chart()
        
        def show_portfolio_distribution():
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
            charts_container.clear()
            with charts_container:
                create_portfolio_distribution_chart()
        
        def show_volatility_analysis():
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
            charts_container.clear()
            with charts_container:
                create_volatility_analysis_chart()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        refresh_all_charts()


def create_pnl_timeline_chart():
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ P&L –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    with ui.card().classes("p-4 bg-white shadow-sm rounded-lg mb-4"):
        ui.label("üìà P&L –ø–æ –≤—Ä–µ–º–µ–Ω–∏").classes("text-lg font-semibold text-gray-800 mb-4")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            transactions = list_transactions()
            
            if not transactions:
                ui.label("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞").classes("text-gray-500 text-center py-8")
                return
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            df = pd.DataFrame(transactions)
            df['created_at'] = pd.to_datetime(df['created_at'])
            df = df.sort_values('created_at')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π P&L
            df['cumulative_invested'] = 0.0
            df['cumulative_value'] = 0.0
            df['cumulative_pnl'] = 0.0
            
            total_invested = 0.0
            total_value = 0.0
            
            for idx, row in df.iterrows():
                if row['type'] in ['buy', 'deposit', 'exchange_in']:
                    total_invested += row['quantity'] * row['price']
                elif row['type'] in ['sell', 'withdrawal', 'exchange_out']:
                    total_invested -= row['quantity'] * row['price']
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                current_price = get_current_price(row['coin']) or row['price']
                if row['type'] in ['buy', 'deposit', 'exchange_in']:
                    total_value += row['quantity'] * current_price
                elif row['type'] in ['sell', 'withdrawal', 'exchange_out']:
                    total_value -= row['quantity'] * current_price
                
                df.at[idx, 'cumulative_invested'] = total_invested
                df.at[idx, 'cumulative_value'] = total_value
                df.at[idx, 'cumulative_pnl'] = total_value - total_invested
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig = go.Figure()
            
            # –õ–∏–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
            fig.add_trace(go.Scatter(
                x=df['created_at'],
                y=df['cumulative_invested'],
                mode='lines+markers',
                name='–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ',
                line=dict(color='blue', width=2),
                marker=dict(size=6)
            ))
            
            # –õ–∏–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            fig.add_trace(go.Scatter(
                x=df['created_at'],
                y=df['cumulative_value'],
                mode='lines+markers',
                name='–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å',
                line=dict(color='green', width=2),
                marker=dict(size=6)
            ))
            
            # –õ–∏–Ω–∏—è P&L
            fig.add_trace(go.Scatter(
                x=df['created_at'],
                y=df['cumulative_pnl'],
                mode='lines+markers',
                name='P&L',
                line=dict(color='red', width=2),
                marker=dict(size=6),
                fill='tonexty'
            ))
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
            fig.update_layout(
                title="P&L –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
                xaxis_title="–î–∞—Ç–∞",
                yaxis_title="–°—É–º–º–∞ ($)",
                hovermode='x unified',
                template='plotly_white',
                height=400
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –Ω–∞ —É—Ä–æ–≤–Ω–µ 0
            fig.add_hline(y=0, line_dash="dash", line_color="gray", opacity=0.5)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            ui.plotly(fig).classes("w-full")
            
        except Exception as e:
            ui.label(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}").classes("text-red-500 text-center py-8")


def create_portfolio_distribution_chart():
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    with ui.card().classes("p-4 bg-white shadow-sm rounded-lg mb-4"):
        ui.label("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è").classes("text-lg font-semibold text-gray-800 mb-4")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio_stats = get_portfolio_stats()
            positions = portfolio_stats.get('top_positions', [])
            
            if not positions:
                ui.label("–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è").classes("text-gray-500 text-center py-8")
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
            labels = []
            values = []
            colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8']
            
            for i, pos in enumerate(positions):
                labels.append(f"{pos['coin']} ({pos['strategy']})")
                values.append(pos['value'])
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            fig = go.Figure(data=[go.Pie(
                labels=labels,
                values=values,
                hole=0.3,
                marker_colors=colors[:len(labels)]
            )])
            
            fig.update_layout(
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–æ–Ω–µ—Ç–∞–º",
                template='plotly_white',
                height=400,
                showlegend=True
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            ui.plotly(fig).classes("w-full")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            with ui.row().classes("w-full gap-4 mt-4"):
                for i, pos in enumerate(positions):
                    percentage = (pos['value'] / sum(p['value'] for p in positions)) * 100
                    with ui.card().classes("p-3 flex-1 text-center"):
                        ui.label(pos['coin']).classes("font-semibold text-gray-800")
                        ui.label(f"${pos['value']:.2f}").classes("text-lg font-bold text-blue-600")
                        ui.label(f"{percentage:.1f}%").classes("text-sm text-gray-500")
        
        except Exception as e:
            ui.label(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}").classes("text-red-500 text-center py-8")


def create_volatility_analysis_chart():
    """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
    with ui.card().classes("p-4 bg-white shadow-sm rounded-lg mb-4"):
        ui.label("üìâ –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏").classes("text-lg font-semibold text-gray-800 mb-4")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio_stats = get_portfolio_stats()
            positions = portfolio_stats.get('top_positions', [])
            
            if not positions:
                ui.label("–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞").classes("text-gray-500 text-center py-8")
                return
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            coins = []
            pnl_percentages = []
            colors = []
            
            for pos in positions:
                coins.append(pos['coin'])
                pnl_pct = pos.get('unreal_pct', 0)
                pnl_percentages.append(pnl_pct)
                
                # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç P&L
                if pnl_pct > 0:
                    colors.append('green')
                elif pnl_pct < -10:
                    colors.append('red')
                else:
                    colors.append('orange')
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            fig = go.Figure(data=[
                go.Bar(
                    x=coins,
                    y=pnl_percentages,
                    marker_color=colors,
                    text=[f"{pct:.1f}%" for pct in pnl_percentages],
                    textposition='auto'
                )
            ])
            
            fig.update_layout(
                title="P&L –ø–æ –º–æ–Ω–µ—Ç–∞–º (%)",
                xaxis_title="–ú–æ–Ω–µ—Ç–∞",
                yaxis_title="P&L (%)",
                template='plotly_white',
                height=400
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –Ω–∞ —É—Ä–æ–≤–Ω–µ 0
            fig.add_hline(y=0, line_dash="dash", line_color="gray", opacity=0.5)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            ui.plotly(fig).classes("w-full")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            with ui.row().classes("w-full gap-4 mt-4"):
                total_pnl = sum(pnl_percentages)
                avg_pnl = total_pnl / len(pnl_percentages) if pnl_percentages else 0
                max_pnl = max(pnl_percentages) if pnl_percentages else 0
                min_pnl = min(pnl_percentages) if pnl_percentages else 0
                
                with ui.card().classes("p-3 flex-1 text-center"):
                    ui.label("–°—Ä–µ–¥–Ω–∏–π P&L").classes("text-sm text-gray-600")
                    ui.label(f"{avg_pnl:.1f}%").classes("text-lg font-bold text-blue-600")
                
                with ui.card().classes("p-3 flex-1 text-center"):
                    ui.label("–õ—É—á—à–∞—è –ø–æ–∑–∏—Ü–∏—è").classes("text-sm text-gray-600")
                    ui.label(f"{max_pnl:.1f}%").classes("text-lg font-bold text-green-600")
                
                with ui.card().classes("p-3 flex-1 text-center"):
                    ui.label("–•—É–¥—à–∞—è –ø–æ–∑–∏—Ü–∏—è").classes("text-sm text-gray-600")
                    ui.label(f"{min_pnl:.1f}%").classes("text-lg font-bold text-red-600")
        
        except Exception as e:
            ui.label(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}").classes("text-red-500 text-center py-8")
