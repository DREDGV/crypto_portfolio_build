"""
UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
"""

from nicegui import ui
import json
from app.core.export_import import (
    export_transactions_csv, export_portfolio_json, 
    import_transactions_csv, import_portfolio_json,
    get_export_statistics, validate_csv_format
)


def create_export_import_tab():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    with ui.column().classes("w-full space-y-6 max-h-[calc(100vh-200px)] overflow-y-auto p-4"):
        ui.label("üì§üì• –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö").classes("text-2xl font-bold text-gray-800")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        with ui.card().classes("p-4 bg-blue-50 border-l-4 border-blue-400 w-full"):
            ui.label("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö").classes("text-lg font-semibold text-blue-800 mb-2")
            
            stats_container = ui.column().classes("w-full")
            
            def refresh_export_stats():
                stats = get_export_statistics()
                stats_container.clear()
                with stats_container:
                    ui.label(f"–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['total_transactions']}").classes("text-gray-700")
                    ui.label(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${stats['total_value']:.2f}").classes("text-gray-700")
                    ui.label(f"–ú–æ–Ω–µ—Ç –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {stats['portfolio_coins']}").classes("text-gray-700")
                    ui.label(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {stats['active_alerts']}").classes("text-gray-700")
                    ui.label(f"–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {stats['sources_count']}").classes("text-gray-700")
            
            refresh_export_stats()
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        with ui.card().classes("p-6 bg-green-50 border-l-4 border-green-400 w-full"):
            ui.label("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö").classes("text-xl font-bold text-green-800 mb-4")
            
            with ui.row().classes("w-full gap-4"):
                # –≠–∫—Å–ø–æ—Ä—Ç CSV
                with ui.column().classes("flex-1"):
                    ui.label("–≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ CSV").classes("text-md font-semibold text-gray-700 mb-2")
                    ui.label("–§–æ—Ä–º–∞—Ç –¥–ª—è Excel –∏ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—á–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤").classes("text-sm text-gray-600 mb-3")
                    
                    def export_csv():
                        try:
                            csv_data = export_transactions_csv()
                            if csv_data:
                                # –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                                ui.download(csv_data, f"transactions_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv", "text/csv")
                                ui.notify("CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!", type="positive")
                            else:
                                ui.notify("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", type="warning")
                        except Exception as e:
                            ui.notify(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {str(e)}", type="negative")
                    
                    ui.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç CSV", icon="download", color="green").classes("w-full").on("click", export_csv)
                
                # –≠–∫—Å–ø–æ—Ä—Ç JSON
                with ui.column().classes("flex-1"):
                    ui.label("–ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –≤ JSON").classes("text-md font-semibold text-gray-700 mb-2")
                    ui.label("–í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è").classes("text-sm text-gray-600 mb-3")
                    
                    def export_json():
                        try:
                            json_data = export_portfolio_json()
                            json_str = json.dumps(json_data, ensure_ascii=False, indent=2)
                            ui.download(json_str, f"portfolio_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json", "application/json")
                            ui.notify("JSON –±—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", type="positive")
                        except Exception as e:
                            ui.notify(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON: {str(e)}", type="negative")
                    
                    ui.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç JSON", icon="backup", color="blue").classes("w-full").on("click", export_json)
        
        # –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        with ui.card().classes("p-6 bg-orange-50 border-l-4 border-orange-400 w-full"):
            ui.label("üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö").classes("text-xl font-bold text-orange-800 mb-4")
            
            with ui.row().classes("w-full gap-4"):
                # –ò–º–ø–æ—Ä—Ç CSV
                with ui.column().classes("flex-1"):
                    ui.label("–ò–º–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ CSV").classes("text-md font-semibold text-gray-700 mb-2")
                    ui.label("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏").classes("text-sm text-gray-600 mb-3")
                    
                    csv_upload = ui.upload(
                        on_upload=lambda e: handle_csv_upload(e),
                        auto_upload=True,
                        max_file_size=10 * 1024 * 1024  # 10MB
                    ).classes("w-full")
                
                # –ò–º–ø–æ—Ä—Ç JSON
                with ui.column().classes("flex-1"):
                    ui.label("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ JSON –±—ç–∫–∞–ø–∞").classes("text-md font-semibold text-gray-700 mb-2")
                    ui.label("–ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è").classes("text-sm text-gray-600 mb-3")
                    
                    json_upload = ui.upload(
                        on_upload=lambda e: handle_json_upload(e),
                        auto_upload=True,
                        max_file_size=50 * 1024 * 1024  # 50MB
                    ).classes("w-full")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞
        import_results_container = ui.column().classes("w-full")
        
        def handle_csv_upload(e):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞"""
            try:
                # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                content = e.content.read().decode('utf-8')
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç
                validation = validate_csv_format(content)
                if not validation['valid']:
                    ui.notify(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CSV: {'; '.join(validation['errors'])}", type="negative")
                    return
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                result = import_transactions_csv(content)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                show_import_results(result, "CSV")
                
            except Exception as e:
                ui.notify(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV —Ñ–∞–π–ª–∞: {str(e)}", type="negative")
        
        def handle_json_upload(e):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON —Ñ–∞–π–ª–∞"""
            try:
                # –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º JSON
                content = e.content.read().decode('utf-8')
                json_data = json.loads(content)
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                result = import_portfolio_json(json_data)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                show_import_results(result, "JSON")
                
            except json.JSONDecodeError as e:
                ui.notify(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}", type="negative")
            except Exception as e:
                ui.notify(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON —Ñ–∞–π–ª–∞: {str(e)}", type="negative")
        
        def show_import_results(result: dict, file_type: str):
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞"""
            import_results_container.clear()
            
            with import_results_container:
                if result['success']:
                    with ui.card().classes("p-4 bg-green-50 border-l-4 border-green-400 w-full"):
                        ui.label(f"‚úÖ –ò–º–ø–æ—Ä—Ç {file_type} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!").classes("text-lg font-semibold text-green-800 mb-2")
                        
                        if file_type == "CSV":
                            ui.label(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {result['imported']}").classes("text-gray-700")
                        else:  # JSON
                            ui.label(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {result['imported_transactions']}").classes("text-gray-700")
                            ui.label(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {result['imported_alerts']}").classes("text-gray-700")
                        
                        if result.get('warnings'):
                            ui.label("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:").classes("text-yellow-700 font-semibold mt-2")
                            for warning in result['warnings']:
                                ui.label(f"‚ö†Ô∏è {warning}").classes("text-yellow-600")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        refresh_export_stats()
                        ui.notify(f"–ò–º–ø–æ—Ä—Ç {file_type} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!", type="positive")
                else:
                    with ui.card().classes("p-4 bg-red-50 border-l-4 border-red-400 w-full"):
                        ui.label(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {file_type}").classes("text-lg font-semibold text-red-800 mb-2")
                        
                        ui.label("–û—à–∏–±–∫–∏:").classes("text-red-700 font-semibold")
                        for error in result['errors']:
                            ui.label(f"‚Ä¢ {error}").classes("text-red-600")
                        
                        if result.get('warnings'):
                            ui.label("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:").classes("text-yellow-700 font-semibold mt-2")
                            for warning in result['warnings']:
                                ui.label(f"‚ö†Ô∏è {warning}").classes("text-yellow-600")
                        
                        ui.notify(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {file_type}", type="negative")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        with ui.card().classes("p-4 bg-gray-50 border-l-4 border-gray-400 w-full"):
            ui.label("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏").classes("text-lg font-semibold text-gray-800 mb-2")
            
            with ui.column().classes("space-y-2"):
                ui.label("üìÑ CSV —Ñ–æ—Ä–º–∞—Ç:").classes("text-md font-semibold text-gray-700")
                ui.label("‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: –ú–æ–Ω–µ—Ç–∞, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –¶–µ–Ω–∞").classes("text-sm text-gray-600")
                ui.label("‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: –ò—Å—Ç–æ—á–Ω–∏–∫, –¢–∏–ø, –ó–∞–º–µ—Ç–∫–∏").classes("text-sm text-gray-600")
                ui.label("‚Ä¢ –¢–∏–ø: 'buy' –∏–ª–∏ 'sell'").classes("text-sm text-gray-600")
                
                ui.label("üíæ JSON —Ñ–æ—Ä–º–∞—Ç:").classes("text-md font-semibold text-gray-700 mt-3")
                ui.label("‚Ä¢ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è").classes("text-sm text-gray-600")
                ui.label("‚Ä¢ –í–∫–ª—é—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∞–ª–µ—Ä—Ç—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É").classes("text-sm text-gray-600")
                ui.label("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è").classes("text-sm text-gray-600")


# –ò–º–ø–æ—Ä—Ç datetime –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö
from datetime import datetime
