"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""

from nicegui import ui
from app.core.services import list_transactions, get_portfolio_stats, positions_fifo


def create_analytics_tab():
    """–°–æ–∑–¥–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    with ui.column().classes("w-full p-4 max-h-[calc(100vh-200px)] overflow-y-auto"):
        ui.label("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è").classes("text-2xl font-bold text-gray-800 mb-4")
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        with ui.card().classes("p-3 bg-yellow-50 border-l-4 border-yellow-400 mb-4"):
            ui.label("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞").classes("text-sm font-semibold text-yellow-800 mb-2")
            diagnostic_info = ui.column().classes("text-xs text-yellow-700")
            
            def update_diagnostic():
                diagnostic_info.clear()
                with diagnostic_info:
                    try:
                        from app.adapters.prices import get_current_price
                        
                        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω
                        btc_price = get_current_price("BTC")
                        eth_price = get_current_price("ETH")
                        
                        ui.label(f"BTC —Ü–µ–Ω–∞: ${btc_price}")
                        ui.label(f"ETH —Ü–µ–Ω–∞: ${eth_price}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
                        positions = positions_fifo()
                        ui.label(f"–ü–æ–∑–∏—Ü–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {len(positions)}")
                        
                        for pos in positions[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                            ui.label(f"{pos['coin']}: {pos['quantity']} @ ${pos['avg_cost']}")
                            
                    except Exception as e:
                        ui.label(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
            
            update_diagnostic()
            with ui.row().classes("gap-2 mt-2"):
                ui.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", icon="refresh").classes("text-xs").on("click", update_diagnostic)
                ui.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", icon="delete").classes("text-xs bg-red-100 text-red-700").on("click", lambda: clear_portfolio_cache())
            
            def clear_portfolio_cache():
                try:
                    from app.core.cache import cache_manager
                    cache_manager.delete("portfolio_stats")
                    ui.notify("‚úÖ –ö—ç—à –ø–æ—Ä—Ç—Ñ–µ–ª—è –æ—á–∏—â–µ–Ω", type="positive")
                    update_diagnostic()
                except Exception as e:
                    ui.notify(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}", type="negative")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
        with ui.card().classes("p-4 bg-gradient-to-r from-blue-50 to-green-50 w-full"):
            ui.label("üìà –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏").classes("text-lg font-semibold text-blue-800 mb-3")
            
            metrics_container = ui.column().classes("w-full")
            
            def refresh_metrics():
                metrics_container.clear()
                with metrics_container:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        transactions = list_transactions()
                        portfolio_stats = get_portfolio_stats()
                        positions = positions_fifo()
                        
                        # –ü—Ä–æ—Å—Ç—ã–µ —Ä–∞—Å—á–µ—Ç—ã
                        from app.core.taxonomy import INBOUND_POSITION_TYPES, normalize_transaction_type
                        total_invested = sum(
                            tx['quantity'] * tx['price']
                            for tx in transactions
                            if normalize_transaction_type(tx.get('type')) in INBOUND_POSITION_TYPES
                        )
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ total_value
                        current_value = portfolio_stats.get('totals', {}).get('total_value', 0)
                        total_pnl = current_value - total_invested
                        roi_percent = (total_pnl / total_invested * 100) if total_invested > 0 else 0
                        
                    except Exception as e:
                        # print(f"DEBUG: –û—à–∏–±–∫–∞ –≤ refresh_metrics: {e}")
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        ui.label(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}").classes("text-red-500 text-center")
                        return
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
                    with ui.row().classes("w-full gap-6"):
                        with ui.column().classes("flex-1 text-center"):
                            ui.label("üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ").classes("text-sm text-gray-500")
                            ui.label(f"${total_invested:.2f}").classes("text-xl font-bold text-blue-600")
                        
                        with ui.column().classes("flex-1 text-center"):
                            ui.label("üìä –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å").classes("text-sm text-gray-500")
                            ui.label(f"${current_value:.2f}").classes("text-xl font-bold text-green-600")
                        
                        with ui.column().classes("flex-1 text-center"):
                            ui.label("üìà P&L").classes("text-sm text-gray-500")
                            ui.label(f"${total_pnl:.2f}").classes(f"text-xl font-bold {'text-green-600' if total_pnl >= 0 else 'text-red-600'}")
                        
                        with ui.column().classes("flex-1 text-center"):
                            ui.label("üéØ ROI").classes("text-sm text-gray-500")
                            ui.label(f"{roi_percent:.1f}%").classes(f"text-xl font-bold {'text-green-600' if roi_percent >= 0 else 'text-red-600'}")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    with ui.row().classes("w-full gap-6 mt-4"):
                        with ui.column().classes("flex-1 text-center"):
                            ui.label("üìù –°–¥–µ–ª–æ–∫").classes("text-sm text-gray-500")
                            ui.label(f"{len(transactions)}").classes("text-lg font-semibold text-gray-700")
                        
                        with ui.column().classes("flex-1 text-center"):
                            ui.label("ü™ô –ú–æ–Ω–µ—Ç").classes("text-sm text-gray-500")
                            ui.label(f"{len(positions)}").classes("text-lg font-semibold text-gray-700")
                        
                        with ui.column().classes("flex-1 text-center"):
                            ui.label("üèÜ –°—Ç—Ä–∞—Ç–µ–≥–∏—è").classes("text-sm text-gray-500")
                            from app.core.taxonomy import normalize_strategy, STRATEGY_META
                            strategies = [normalize_strategy(tx.get('strategy', 'unknown')) for tx in transactions]
                            main_strategy = max(set(strategies), key=strategies.count) if strategies else 'unknown'
                            strategy_label = STRATEGY_META.get(main_strategy).label if main_strategy in STRATEGY_META else main_strategy
                            ui.label(f"{strategy_label}").classes("text-lg font-semibold text-purple-600")
            
            refresh_metrics()
        
        # –ü–æ–∑–∏—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        with ui.card().classes("p-4 bg-green-50 w-full mt-4"):
            ui.label("ü™ô –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏").classes("text-lg font-semibold text-green-800 mb-3")
            
            positions_container = ui.column().classes("w-full min-h-[200px]")
            
            def refresh_positions():
                positions_container.clear()
                with positions_container:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                    portfolio_stats = get_portfolio_stats()
                    positions = portfolio_stats.get('top_positions', [])
                    
                    if positions:
                        for pos in positions:
                            coin = pos['coin']
                            qty = pos.get('quantity', 0)
                            current_price = pos.get('price', 0)  # –£–∂–µ –æ–±–æ–≥–∞—â–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞
                            avg_cost = pos.get('avg_cost', 0)
                            current_value = pos.get('value', 0)  # –£–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
                            cost_basis = pos.get('cost_basis', 0)  # –£–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
                            pnl = pos.get('unreal_pnl', 0)  # –£–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π P&L
                            pnl_percent = pos.get('unreal_pct', 0)  # –£–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
                            
                            with ui.row().classes("w-full justify-between items-center p-3 bg-white rounded-lg mb-3 shadow-sm border"):
                                with ui.column().classes("flex-1 min-w-[120px]"):
                                    ui.label(f"{coin}").classes("font-semibold text-gray-800 text-lg")
                                    ui.label(f"{qty:.4f} @ ${avg_cost:.2f}").classes("text-sm text-gray-600")
                                
                                with ui.column().classes("flex-1 text-center min-w-[100px]"):
                                    ui.label(f"${current_price:.2f}").classes("font-semibold text-blue-600 text-lg")
                                    ui.label("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞").classes("text-xs text-gray-500")
                                
                                with ui.column().classes("flex-1 text-center min-w-[100px]"):
                                    ui.label(f"${current_value:.2f}").classes("font-semibold text-green-600 text-lg")
                                    ui.label("–°—Ç–æ–∏–º–æ—Å—Ç—å").classes("text-xs text-gray-500")
                                
                                with ui.column().classes("flex-1 text-center min-w-[120px]"):
                                    ui.label(f"${pnl:.2f}").classes(f"font-semibold {'text-green-600' if pnl >= 0 else 'text-red-600'} text-lg")
                                    ui.label(f"({pnl_percent:+.1f}%)").classes(f"text-sm {'text-green-600' if pnl >= 0 else 'text-red-600'}")
                    else:
                        ui.label("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π").classes("text-gray-500 italic")
            
            refresh_positions()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        with ui.row().classes("w-full justify-center gap-3 mt-6"):
            ui.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", icon="refresh").classes("bg-blue-500 text-white px-6 py-2").on("click", lambda: (
                refresh_metrics(),
                refresh_positions(),
                ui.notify("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", type="positive")
            ))
            ui.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", icon="delete").classes("bg-red-500 text-white px-6 py-2").on("click", lambda: clear_all_cache())
        
        def clear_all_cache():
            try:
                from app.core.cache import cache_manager
                cache_manager.delete("portfolio_stats")
                cache_manager.clear()  # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à
                ui.notify("‚úÖ –í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω", type="positive")
                refresh_metrics()
                refresh_positions()
            except Exception as e:
                ui.notify(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}", type="negative")
        
        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        ui.timer(30, lambda: (
            refresh_metrics(),
            refresh_positions()
        ))
