"""
UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
from nicegui import ui
from typing import List, Dict
from app.core.notifications import Notification, get_notification_manager


class NotificationUI:
    """UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.notification_manager = get_notification_manager()
        self.notification_container = None
        self.notification_badge = None
        self.notification_count = 0
        
    def create_notification_badge(self) -> ui.element:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–π–¥–∂–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        with ui.button(icon="notifications", color="primary") as badge_btn:
            self.notification_badge = ui.badge("0", color="red").classes("absolute -top-2 -right-2")
            badge_btn.on("click", self.show_notifications_dialog)
        
        return badge_btn
    
    def show_notifications_dialog(self):
        """–ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        notifications = self.notification_manager.get_notifications(20)
        
        with ui.dialog() as dialog, ui.card().classes("w-full max-w-2xl max-h-[80vh]"):
            ui.label("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è").classes("text-xl font-bold mb-4")
            
            if not notifications:
                ui.label("–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π").classes("text-gray-500 text-center py-8")
            else:
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                with ui.row().classes("justify-between items-center mb-4"):
                    ui.label(f"–í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(notifications)}")
                    with ui.row():
                        ui.button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", icon="clear_all", color="red").on(
                            "click", lambda: self.clear_all_notifications(dialog)
                        )
                        ui.button("–ó–∞–∫—Ä—ã—Ç—å", icon="close").on("click", dialog.close)
                
                # –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                with ui.column().classes("w-full space-y-2 max-h-[60vh] overflow-y-auto"):
                    for notification in reversed(notifications):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
                        self._create_notification_item(notification)
            
            dialog.open()
    
    def _create_notification_item(self, notification: Notification):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ –∏–∫–æ–Ω–∫—É –ø–æ —Ç–∏–ø—É
        color_map = {
            'success': 'green',
            'info': 'blue', 
            'warning': 'orange',
            'error': 'red'
        }
        
        icon_map = {
            'success': 'check_circle',
            'info': 'info',
            'warning': 'warning',
            'error': 'error'
        }
        
        color = color_map.get(notification.type, 'blue')
        icon = icon_map.get(notification.type, 'info')
        
        with ui.card().classes(f"w-full border-l-4 border-{color}-500"):
            with ui.row().classes("items-start gap-3"):
                ui.icon(icon).classes(f"text-{color}-500 mt-1")
                
                with ui.column().classes("flex-1"):
                    ui.label(notification.title).classes("font-semibold text-gray-800")
                    ui.label(notification.message).classes("text-sm text-gray-600")
                    
                    # –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    time_str = notification.timestamp.strftime("%d.%m.%Y %H:%M:%S")
                    ui.label(time_str).classes("text-xs text-gray-400 mt-1")
                
                # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                ui.button(icon="close", size="sm", color="gray").classes("mt-1").on(
                    "click", lambda n=notification: self._remove_notification(n)
                )
    
    def _remove_notification(self, notification: Notification):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if notification in self.notification_manager.notifications:
            self.notification_manager.notifications.remove(notification)
            self._update_badge()
    
    def clear_all_notifications(self, dialog):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.notification_manager.clear_notifications()
        self._update_badge()
        dialog.close()
        ui.notify("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã", type="info")
    
    def _update_badge(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.notification_count = len(self.notification_manager.notifications)
        if self.notification_badge:
            self.notification_badge.text = str(self.notification_count)
            if self.notification_count == 0:
                self.notification_badge.visible = False
            else:
                self.notification_badge.visible = True
    
    def setup_notification_handler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        def handle_notification(notification: Notification):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
            self._update_badge()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ UI –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            try:
                ui.notify(
                    notification.message,
                    type=notification.type,
                    position="top-right",
                    timeout=5000
                )
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ UI –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                pass
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.notification_manager.subscribe(handle_notification)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._update_badge()


def create_notifications_tab():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    notification_ui = NotificationUI()
    notification_ui.setup_notification_handler()
    
    with ui.column().classes("w-full h-full overflow-y-auto p-4"):
        ui.label("üîî –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π").classes("text-2xl font-bold text-gray-800 mb-6")
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        with ui.card().classes("w-full p-4 mb-6"):
            ui.label("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã").classes("text-lg font-semibold mb-3")
            
            with ui.row().classes("items-center gap-4"):
                status_icon = ui.icon("check_circle", color="green")
                ui.label("–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞").classes("text-green-600")
                
                # –ö–Ω–æ–ø–∫–∞ –±–µ–π–¥–∂–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                notification_ui.create_notification_badge()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        with ui.card().classes("w-full p-4 mb-6"):
            ui.label("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏").classes("text-lg font-semibold mb-3")
            
            with ui.row().classes("items-center gap-4"):
                ui.label("–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤:")
                interval_input = ui.number("30", min=10, max=300).classes("w-20")
                ui.label("—Å–µ–∫—É–Ω–¥")
                
                ui.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å", icon="save").on("click", lambda: ui.notify(
                    f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {interval_input.value} —Å–µ–∫—É–Ω–¥", type="info"
                ))
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        with ui.card().classes("w-full p-4 mb-6"):
            ui.label("üß™ –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è").classes("text-lg font-semibold mb-3")
            
            with ui.row().classes("gap-2"):
                ui.button("–£—Å–ø–µ—Ö", color="green").on("click", lambda: 
                    notification_ui.notification_manager.create_manual_notification(
                        "‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—Ö–∞", "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ", "success"
                    )
                )
                
                ui.button("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", color="blue").on("click", lambda: 
                    notification_ui.notification_manager.create_manual_notification(
                        "‚ÑπÔ∏è –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "info"
                    )
                )
                
                ui.button("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", color="orange").on("click", lambda: 
                    notification_ui.notification_manager.create_manual_notification(
                        "‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "warning"
                    )
                )
                
                ui.button("–û—à–∏–±–∫–∞", color="red").on("click", lambda: 
                    notification_ui.notification_manager.create_manual_notification(
                        "‚ùå –¢–µ—Å—Ç –æ—à–∏–±–∫–∏", "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ", "error"
                    )
                )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        with ui.card().classes("w-full p-4"):
            ui.label("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞").classes("text-lg font-semibold mb-3")
            
            stats_container = ui.column().classes("w-full")
            
            def refresh_stats():
                stats_container.clear()
                with stats_container:
                    notifications = notification_ui.notification_manager.get_notifications()
                    
                    # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º
                    type_counts = {}
                    for notif in notifications:
                        type_counts[notif.type] = type_counts.get(notif.type, 0) + 1
                    
                    ui.label(f"–í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(notifications)}").classes("text-sm")
                    
                    for notif_type, count in type_counts.items():
                        ui.label(f"{notif_type}: {count}").classes("text-sm text-gray-600")
            
            refresh_stats()
            ui.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", icon="refresh").on("click", refresh_stats)
    
    return notification_ui
