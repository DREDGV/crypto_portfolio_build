"""
–®–∞–≥ 2: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤–≤–æ–¥–∞ —Å–¥–µ–ª–æ–∫
–î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –∫–Ω–æ–ø–∫—É "—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞" –∏ –≤—Å–µ —É–¥–æ–±—Å—Ç–≤–∞
"""

import os

from nicegui import ui

from app.core.models import TransactionIn, PriceAlertIn
from app.core.services import (
    add_transaction,
    delete_transaction,
    enrich_positions_with_market,
    export_positions_csv,
    export_transactions_csv,
    get_portfolio_stats,
    get_transaction,
    get_transaction_stats,
    list_transactions,
    positions_fifo,
    update_transaction,
    get_sources_with_frequency,
    update_source_name,
    delete_source_from_transactions,
    get_source_statistics,
    # –ê–ª–µ—Ä—Ç—ã
    add_price_alert,
    get_price_alerts,
    update_price_alert,
    delete_price_alert,
    check_price_alerts,
    get_alert_statistics,
)

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω)
# from app.ui.charts import (
#     create_portfolio_distribution_chart,
#     create_transactions_timeline_chart,
#     create_strategy_performance_chart,
#     create_source_activity_chart,
#     get_portfolio_stats,
# )

# –ò–º–ø–æ—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—ç—à–∞
from app.ui.cache_monitor import create_cache_monitor_tab

# –ò–º–ø–æ—Ä—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞
from app.ui.export_import import create_export_import_tab

# –ò–º–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
from app.ui.analytics_simple import create_analytics_tab
# from app.ui.advanced_analytics import create_advanced_analytics_tab

# –ò–º–ø–æ—Ä—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
# from app.ui.notifications import create_notifications_tab

# –ò–º–ø–æ—Ä—Ç –≤–∫–ª–∞–¥–∫–∏ –∞–∫—Ü–∏–π
from app.ui.stocks_tab import create_stocks_tab

CURRENCY = os.getenv("REPORT_CURRENCY", "USD").upper()
TYPES = ["buy", "sell", "exchange_in", "exchange_out", "deposit", "withdrawal"]
STRATS = ["long", "mid", "short", "scalp"]

# –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
TYPE_ICONS = {
    "buy": "üìà",
    "sell": "üìâ",
    "exchange_in": "‚ÜóÔ∏è",
    "exchange_out": "‚ÜòÔ∏è",
    "deposit": "üí∞",
    "withdrawal": "üí∏",
}

# –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
STRATEGY_ICONS = {"long": "ü¶Ö", "mid": "‚öñÔ∏è", "short": "‚ö°", "scalp": "üéØ"}


# –¶–≤–µ—Ç–∞ –¥–ª—è PnL
def get_pnl_color(value):
    if value > 0:
        return "text-green-600"
    elif value < 0:
        return "text-red-600"
    else:
        return "text-gray-600"


def render_required_label(label_text: str, helper_text: str | None = None):
    """–†–µ–Ω–¥–µ—Ä–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è —Å –ø–æ–º–µ—Ç–∫–æ–π."""
    ui.html(
        f'<span class="text-sm font-medium text-gray-700">{label_text} '
        "<span class=\"text-red-500 font-semibold\">*</span></span>"
    )
    if helper_text:
        ui.label(helper_text).classes("text-xs text-red-500 font-medium")


def create_enhanced_stat_card(title, value, icon, color="primary"):
    """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º"""
    color_classes = {
        "primary": "bg-gradient-to-r from-indigo-500 to-purple-600",
        "success": "bg-gradient-to-r from-green-500 to-emerald-600", 
        "info": "bg-gradient-to-r from-blue-500 to-cyan-600",
        "warning": "bg-gradient-to-r from-yellow-500 to-orange-600",
    }
    
    with ui.card().classes(
        f"p-6 text-white shadow-xl rounded-xl border border-white/20 hover:shadow-2xl transition-all duration-300 {color_classes.get(color, color_classes['primary'])}"
    ):
        with ui.column().classes("text-center"):
            ui.label(icon).classes("text-4xl mb-3")
            ui.label(value).classes("text-2xl font-bold mb-2")
            ui.label(title).classes("text-sm opacity-90 font-medium")


def open_enhanced_add_dialog():
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
    quick_buttons_container = None
    with ui.dialog() as dialog, ui.card().classes("min-w-[700px] max-w-[900px] p-6"):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞
        with ui.row().classes("items-center gap-2 mb-6 pb-4 border-b border-gray-200"):
            ui.icon("add_circle").classes("text-2xl text-green-600")
            ui.label("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É").classes("text-2xl font-bold text-gray-800")
            ui.badge("–ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥", color="green").classes("ml-auto")

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º—ã (–±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ–∑–∂–µ)
        coin = None
        qty = None
        price = None
        source = None
        notes = None

        def set_coin_value(coin_symbol):
            """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã"""
            coin.value = coin_symbol

        def set_source_value(exchange_name):
            """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
            source.value = exchange_name

        def refresh_sources_list():
            """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ"""
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                sources_with_freq = get_sources_with_frequency()
                all_sources = [source for source, freq in sources_with_freq]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                source.options = all_sources
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
                top_sources = [source for source, freq in sources_with_freq[:3]]
                update_quick_source_buttons(top_sources)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")

        def update_quick_source_buttons(top_sources):
            """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
            try:
                if quick_buttons_container:
                    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–Ω–æ–ø–æ–∫
                    quick_buttons_container.clear()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
                    if top_sources:
                        ui.label("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:").classes("text-xs text-blue-600 font-medium")
                        with quick_buttons_container:
                            for source_name in top_sources:
                                ui.button(
                                    source_name,
                                    on_click=lambda s=source_name: set_source_value(s),
                                ).props("size=sm outline").classes(
                                    "text-xs bg-blue-100 hover:bg-blue-200 text-blue-700 px-2 py-1 rounded"
                                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞: {e}")

        def edit_source_name(old_name, mgmt_dialog, refresh_func):
            """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
            with ui.dialog() as edit_dialog, ui.card().classes("p-6"):
                ui.label(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: {old_name}").classes("text-lg font-semibold mb-4")
                
                new_name_input = ui.input("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", value=old_name).classes("w-full mb-4")
                
                def save_changes():
                    new_name = new_name_input.value.strip()
                    
                    if not new_name:
                        ui.notify("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", type="negative")
                        return
                    
                    if new_name == old_name:
                        ui.notify("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å", type="info")
                        edit_dialog.close()
                        return
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    success = update_source_name(old_name, new_name)
                    
                    if success:
                        ui.notify(f"–ò—Å—Ç–æ—á–Ω–∏–∫ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {old_name} -> {new_name}", type="positive")
                        edit_dialog.close()
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                        refresh_func()
                        # –ë–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: UI –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ refresh_both()
                    else:
                        ui.notify("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è", type="negative")
                
                with ui.row().classes("justify-end gap-3"):
                    ui.button("–û—Ç–º–µ–Ω–∞", on_click=edit_dialog.close)
                    ui.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", on_click=save_changes).classes("bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg")
                
                edit_dialog.open()

        def delete_source(source_name, mgmt_dialog, refresh_func):
            """–£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫"""
            with ui.dialog() as delete_dialog, ui.card().classes("p-6"):
                ui.label(f"–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ '{source_name}'?").classes("text-lg font-semibold mb-4")
                ui.label("–≠—Ç–æ —É–¥–∞–ª–∏—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫.").classes("text-sm text-gray-600 mb-4")
                
                def confirm_delete():
                    success = delete_source_from_transactions(source_name)
                    if success:
                        ui.notify(f"–ò—Å—Ç–æ—á–Ω–∏–∫ '{source_name}' —É–¥–∞–ª–µ–Ω", type="positive")
                        delete_dialog.close()
                        refresh_func()
                        # –ë–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    else:
                        ui.notify("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", type="negative")
                
                with ui.row().classes("justify-end gap-3"):
                    ui.button("–û—Ç–º–µ–Ω–∞", on_click=delete_dialog.close)
                    ui.button("–£–¥–∞–ª–∏—Ç—å", on_click=confirm_delete)
                
                delete_dialog.open()

        def move_source_up(source_name, mgmt_dialog, refresh_func):
            """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–≤–µ—Ä—Ö –≤ —Å–ø–∏—Å–∫–µ"""
            from app.core.services import move_source_up as move_up
            success = move_up(source_name)
            if success:
                ui.notify(f"–ò—Å—Ç–æ—á–Ω–∏–∫ '{source_name}' –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–≤–µ—Ä—Ö", type="positive")
                refresh_func()
                # –ë–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –≤—ã—à–µ
            else:
                ui.notify(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å '{source_name}' –≤–≤–µ—Ä—Ö", type="negative")

        def move_source_down(source_name, mgmt_dialog, refresh_func):
            """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–Ω–∏–∑ –≤ —Å–ø–∏—Å–∫–µ"""
            from app.core.services import move_source_down as move_down
            success = move_down(source_name)
            if success:
                ui.notify(f"–ò—Å—Ç–æ—á–Ω–∏–∫ '{source_name}' –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–Ω–∏–∑", type="positive")
                refresh_func()
                # –ë–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –≤—ã—à–µ
            else:
                ui.notify(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å '{source_name}' –≤–Ω–∏–∑", type="negative")

        def add_new_source(mgmt_dialog, refresh_func):
            """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"""
            with ui.dialog() as add_dialog, ui.card().classes("p-6"):
                ui.label("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫").classes("text-lg font-semibold mb-4")
                
                new_source_input = ui.input("–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞").classes("w-full mb-4")
                
                def add_source():
                    source_name = new_source_input.value.strip()
                    if not source_name:
                        ui.notify("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", type="negative")
                        return
                    
                    ui.notify(f"–ò—Å—Ç–æ—á–Ω–∏–∫ '{source_name}' –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", type="positive")
                    add_dialog.close()
                    refresh_func()
                
                with ui.row().classes("justify-end gap-3"):
                    ui.button("–û—Ç–º–µ–Ω–∞", on_click=add_dialog.close)
                    ui.button("–î–æ–±–∞–≤–∏—Ç—å", on_click=add_source)
                
                add_dialog.open()

        def open_sources_management_dialog():
            """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
            mgmt_dialog = ui.dialog()
            sources_container = None
            
            def refresh_mgmt_sources_list():
                """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ"""
                nonlocal sources_container
                if sources_container:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                    sources_with_freq = get_sources_with_frequency()
                    
                    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    sources_container.clear()
                    
                    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    for i, (source_name, frequency) in enumerate(sources_with_freq):
                        with sources_container:
                            with ui.row().classes("items-center gap-3 p-3 bg-gray-50 rounded-lg"):
                                # –ù–æ–º–µ—Ä –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
                                ui.label(f"{i+1}.").classes("text-sm font-bold text-gray-600 w-8")
                                
                                # –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                                ui.label(source_name).classes("flex-1 text-sm font-medium")
                                
                                # –ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                                ui.label(f"({frequency} —Ä–∞–∑)").classes("text-xs text-gray-500")
                                
                                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                                with ui.row().classes("gap-1"):
                                    ui.button("‚úèÔ∏è", on_click=lambda s=source_name: edit_source_name(s, mgmt_dialog, refresh_both)).props("size=sm flat").classes("text-blue-600")
                                    ui.button("üóëÔ∏è", on_click=lambda s=source_name: delete_source(s, mgmt_dialog, refresh_both)).props("size=sm flat").classes("text-red-600")
                                    if i > 0:
                                        ui.button("‚¨ÜÔ∏è", on_click=lambda s=source_name: move_source_up(s, mgmt_dialog, refresh_both)).props("size=sm flat").classes("text-green-600")
                                    if i < len(sources_with_freq) - 1:
                                        ui.button("‚¨áÔ∏è", on_click=lambda s=source_name: move_source_down(s, mgmt_dialog, refresh_both)).props("size=sm flat").classes("text-green-600")

            # –û–±–Ω–æ–≤–ª—è–µ—Ç –∏ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–µ, –∏ —Å–ø–∏—Å–æ–∫ –≤ –¥–∏–∞–ª–æ–≥–µ
            def refresh_both():
                try:
                    refresh_sources_list()  # –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ–ª–µ–∫—Ç –∏ —Ç–æ–ø‚Äë–∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–µ
                except Exception as _:
                    pass
                refresh_mgmt_sources_list()
            
            with mgmt_dialog, ui.card().classes("min-w-[600px] max-w-[800px] p-6"):
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                with ui.row().classes("items-center gap-2 mb-6 pb-4 border-b border-gray-200"):
                    ui.icon("settings").classes("text-2xl text-blue-600")
                    ui.label("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏").classes("text-2xl font-bold text-gray-800")
                
                # –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                with ui.column().classes("space-y-3"):
                    ui.label("–ò—Å—Ç–æ—á–Ω–∏–∫–∏ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏):").classes("text-sm font-medium text-gray-700")
                    
                    sources_container = ui.column().classes("space-y-3")
                    refresh_mgmt_sources_list()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
                
                # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                with ui.row().classes("justify-end gap-3 mt-6 pt-4 border-t border-gray-200"):
                    ui.button("–ó–∞–∫—Ä—ã—Ç—å", on_click=mgmt_dialog.close).classes(
                        "bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-2 rounded-lg"
                    )
                    ui.button("–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", on_click=lambda: add_new_source(mgmt_dialog, refresh_both)).classes(
                        "bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg"
                    )
                
                mgmt_dialog.open()

        def show_sources_statistics():
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
            with ui.dialog() as stats_dialog, ui.card().classes("min-w-[500px] max-w-[700px] p-6"):
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                with ui.row().classes("items-center gap-2 mb-6 pb-4 border-b border-gray-200"):
                    ui.icon("analytics").classes("text-2xl text-green-600")
                    ui.label("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤").classes("text-2xl font-bold text-gray-800")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                stats = get_source_statistics()
                total_transactions = stats["total_transactions"]
                unique_sources = stats["unique_sources"]
                top_sources = stats["top_sources"]
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                with ui.card().classes("p-4 bg-blue-50 mb-4"):
                    ui.label("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞").classes("text-lg font-semibold text-blue-800 mb-2")
                    ui.label(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_transactions}").classes("text-sm text-blue-700")
                    ui.label(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {unique_sources}").classes("text-sm text-blue-700")
                
                # –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                with ui.column().classes("space-y-2"):
                    ui.label("–¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:").classes("text-sm font-medium text-gray-700")
                    
                    if top_sources:
                        for i, (source_name, frequency) in enumerate(top_sources):
                            if frequency > 0:
                                percentage = (frequency / total_transactions * 100) if total_transactions > 0 else 0
                                with ui.row().classes("items-center gap-3 p-2 bg-gray-50 rounded"):
                                    ui.label(f"{i+1}.").classes("text-sm font-bold text-gray-600 w-8")
                                    ui.label(source_name).classes("flex-1 text-sm font-medium")
                                    ui.label(f"{frequency} ({percentage:.1f}%)").classes("text-xs text-gray-500")
                                    
                                    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                                    with ui.column().classes("flex-1"):
                                        ui.linear_progress(percentage / 100).classes("h-2")
                    else:
                        ui.label("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö").classes("text-sm text-gray-500 italic")
                
                # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                with ui.row().classes("justify-end mt-6 pt-4 border-t border-gray-200"):
                    ui.button("–ó–∞–∫—Ä—ã—Ç—å", on_click=stats_dialog.close).classes(
                        "bg-gray-300 hover:bg-gray-400 text-gray-700 px-4 py-2 rounded-lg"
                    )
                
                stats_dialog.open()

        def get_current_price():
            """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –º–æ–Ω–µ—Ç—ã"""
            if not coin.value or not coin.value.strip():
                ui.notify("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã", type="negative")
                return

            try:
                from app.adapters.prices import get_aggregated_price

                coin_symbol = coin.value.upper().strip()

                # –ü–æ–ª—É—á–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                ui.notify(
                    f"üîÑ –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã {coin_symbol} –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...",
                    type="info",
                )

                price_data = get_aggregated_price(coin_symbol)

                if price_data and price_data["price"]:
                    current_price = price_data["price"]
                    price.value = str(current_price)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    sources = price_data["sources"]
                    source_count = price_data["source_count"]

                    message = (
                        f"‚úÖ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {coin_symbol}: ${current_price:,.2f}"
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
                    if source_count > 1:
                        message += f" (–∏–∑ {source_count} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {', '.join(sources)})"
                    else:
                        message += f" (–∏—Å—Ç–æ—á–Ω–∏–∫: {sources[0]})"

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–±—Ä–æ—Å–µ —Ü–µ–Ω
                    if "price_range" in price_data:
                        price_range = price_data["price_range"]
                        spread = price_range["spread"]
                        if spread > 0:
                            spread_percent = (spread / current_price) * 100
                            message += f" [—Ä–∞–∑–±—Ä–æ—Å: ${spread:.2f} ({spread_percent:.1f}%)]"

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
                    if price_data.get("cached"):
                        message += " (–∏–∑ –∫—ç—à–∞)"
                    else:
                        message += " (–∞–∫—Ç—É–∞–ª—å–Ω–æ)"

                    ui.notify(message, type="positive")
                else:
                    ui.notify(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {coin_symbol}",
                        type="negative",
                    )

            except Exception as e:
                ui.notify(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}", type="negative")

        def on_add():
            """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–¥–µ–ª–∫—É"""
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
            if not coin.value or not coin.value.strip():
                ui.notify("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã", type="negative")
                return

            if not qty.value or float(qty.value) <= 0:
                ui.notify("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", type="negative")
                return

            if not price.value or float(price.value) <= 0:
                ui.notify("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É", type="negative")
                return

            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª–µ–π
                coin_symbol = (coin.value or "").upper().strip()
                quantity = float(qty.value or 0)
                price_value = float(price.value or 0)
                source_name = (source.value or "").strip()
                notes_value = (notes.value or "").strip()
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                data = TransactionIn(
                    coin=coin_symbol,
                    type=ttype.value,
                    quantity=quantity,
                    price=price_value,
                    strategy=strategy.value,
                    source=source_name,
                    notes=notes_value,
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                result = add_transaction(data)
                
                if result:
                    ui.notify("‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", type="positive")
                    dialog.close()
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    refresh()
                else:
                    ui.notify("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏", type="negative")
                    
            except ValueError as e:
                ui.notify(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {e}", type="negative")
            except Exception as e:
                ui.notify(f"‚ùå –û—à–∏–±–∫–∞: {e}", type="negative")

        # –§–æ—Ä–º–∞ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        with ui.grid(columns=2).classes("gap-6"):
            # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            with ui.column().classes("gap-4"):
                # –ú–æ–Ω–µ—Ç–∞ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
                with ui.column().classes("gap-1"):
                    render_required_label("üí∞ –ú–æ–Ω–µ—Ç–∞", "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏")
                    
                    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –º–æ–Ω–µ—Ç—ã
                    coin = (
                        ui.input(placeholder="BTC, ETH, SOL...")
                        .props(
                            "uppercase autocomplete=off autocorrect=off autocapitalize=off spellcheck=false"
                        )
                        .classes("w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent")
                        .on("keydown.escape", lambda: None)  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
                        .on("keydown.ctrl+enter", on_add)
                    )
                    
                    # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç
                    with ui.row().classes("gap-2 mt-2 flex-wrap"):
                        ui.label("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ:").classes("text-xs text-blue-600 font-medium self-center")
                        
                        # –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
                        try:
                            transactions = list_transactions()
                            coin_counts = {}
                            for tx in transactions:
                                coin_symbol = tx.get("coin", "").strip().upper()
                                if coin_symbol:
                                    coin_counts[coin_symbol] = coin_counts.get(coin_symbol, 0) + 1
                            
                            # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
                            popular_coins = ["BTC", "ETH", "SOL", "ADA", "DOT", "MATIC", "AVAX", "LINK"]
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã —Å —á–∞—Å—Ç–æ—Ç–æ–π 0
                            for pop_coin in popular_coins:
                                if pop_coin not in coin_counts:
                                    coin_counts[pop_coin] = 0
                            
                            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
                            sorted_coins = sorted(
                                coin_counts.items(), key=lambda x: x[1], reverse=True
                            )
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-6 –º–æ–Ω–µ—Ç
                            for coin_symbol, frequency in sorted_coins[:6]:
                                ui.button(
                                    coin_symbol,
                                    on_click=lambda c=coin_symbol: set_coin_value(c),
                                ).props("size=sm outline").classes(
                                    "text-xs bg-green-100 hover:bg-green-200 text-green-700 px-2 py-1 rounded"
                                )
                        except Exception:
                            # Fallback –∫–Ω–æ–ø–∫–∏
                            for coin_symbol in ["BTC", "ETH", "SOL", "ADA", "DOT", "MATIC"]:
                                ui.button(
                                    coin_symbol,
                                    on_click=lambda c=coin_symbol: set_coin_value(c),
                                ).props("size=sm outline").classes(
                                    "text-xs bg-green-100 hover:bg-green-200 text-green-700 px-2 py-1 rounded"
                                )
                    

                # –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏
                with ui.column().classes("gap-1"):
                    render_required_label("üìä –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏", "buy = –ø–æ–∫—É–ø–∫–∞, sell = –ø—Ä–æ–¥–∞–∂–∞")
                    ttype = ui.select(
                        TYPES, label="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø", value="buy"
                    ).classes("w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent")

                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
                with ui.column().classes("gap-1"):
                    render_required_label("üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç")
                    qty = (
                        ui.input(placeholder="0.0")
                        .props(
                            "type=number inputmode=decimal autocomplete=off step=0.000001"
                        )
                        .classes("w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent")
                        .on("keydown.escape", lambda: None)  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
                        .on("keydown.ctrl+enter", on_add)
                    )

                # –¶–µ–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π "—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞"
                with ui.column().classes("gap-1"):
                    with ui.row().classes("items-center gap-2"):
                        render_required_label("üíµ –¶–µ–Ω–∞ –∑–∞ –º–æ–Ω–µ—Ç—É", f"–¶–µ–Ω–∞ –≤ {CURRENCY}")
                        ui.button(
                            "üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", on_click=get_current_price
                        ).props("size=sm outline").classes("text-xs bg-blue-100 hover:bg-blue-200 text-blue-700 px-2 py-1 rounded").tooltip(
                            "–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å CoinGecko API"
                        )
                    price = (
                        ui.input(placeholder="0.00")
                        .props(
                            "type=number inputmode=decimal autocomplete=off step=0.01"
                        )
                        .classes("w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent")
                        .on("keydown.escape", lambda: None)  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
                        .on("keydown.ctrl+enter", on_add)
                    )

            # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            with ui.column().classes("gap-4"):
                # –°—Ç—Ä–∞—Ç–µ–≥–∏—è
                with ui.column().classes("gap-1"):
                    render_required_label("üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è", "long = –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è, short = –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è")
                    strategy = ui.select(
                        STRATS, label="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", value="long"
                    ).classes("w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent")

                # –ò—Å—Ç–æ—á–Ω–∏–∫ —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º —Å–ø–∏—Å–∫–æ–º, –∫–Ω–æ–ø–∫–∞–º–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
                with ui.column().classes("gap-1"):
                    ui.label("üè¢ –ò—Å—Ç–æ—á–Ω–∏–∫").classes(
                        "text-sm font-medium text-gray-700"
                    )
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ services.py
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                    sources_with_freq = get_sources_with_frequency()
                    all_sources = [source for source, freq in sources_with_freq]
                    top_sources = [source for source, freq in sources_with_freq[:3]]  # –¢–æ–ø-3 –¥–ª—è –∫–Ω–æ–ø–æ–∫
                    
                    # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–≤–æ–¥–∞
                    source = ui.select(
                        all_sources, 
                        label="–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫",
                        with_input=True,
                        new_value_mode="add-unique"
                    ).classes("w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent")
                    
                    # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–ª—è —Ç–æ–ø-3 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                    quick_buttons_container = ui.column().classes("mt-2")
                    if top_sources:
                        ui.label("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:").classes("text-xs text-blue-600 font-medium")
                        with quick_buttons_container:
                            for source_name in top_sources:
                                ui.button(
                                    source_name,
                                    on_click=lambda s=source_name: set_source_value(s),
                                ).props("size=sm outline").classes(
                                    "text-xs bg-blue-100 hover:bg-blue-200 text-blue-700 px-2 py-1 rounded"
                                )
                    
                    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
                    with ui.row().classes("gap-2 mt-2"):
                        ui.button("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", icon="settings").props("size=sm outline").classes(
                            "text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 px-2 py-1 rounded"
                        ).on("click", lambda: open_sources_management_dialog())
                        ui.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", icon="analytics").props("size=sm outline").classes(
                            "text-xs bg-green-100 hover:bg-green-200 text-green-700 px-2 py-1 rounded"
                        ).on("click", lambda: show_sources_statistics())
                    
                    ui.label("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π").classes(
                        "text-xs text-gray-500"
                    )

                # –ó–∞–º–µ—Ç–∫–∏
                with ui.column().classes("gap-1"):
                    ui.label("üìù –ó–∞–º–µ—Ç–∫–∏").classes(
                        "text-sm font-medium text-gray-700"
                    )
                    notes = (
                        ui.textarea(placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...")
                        .classes("w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent")
                        .on("keydown.escape", lambda: None)  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
                        .on("keydown.ctrl+enter", on_add)
                    )
                    ui.label("–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è").classes(
                        "text-xs text-gray-500"
                    )

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                def clear_form():
                    """–û—á–∏—â–∞–µ—Ç —Ñ–æ—Ä–º—É"""
                    if coin:
                        coin.value = ""
                    if qty:
                        qty.value = ""
                    if price:
                        price.value = ""
                    if source:
                        source.value = ""
                    if notes:
                        notes.value = ""
                
                # –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
                for element in [coin, qty, price, notes]:
                    if element:
                        element.on("keydown.escape", clear_form)



        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        with ui.row().classes("justify-end gap-3 mt-6 pt-4 border-t border-gray-200"):
            ui.button("–û—Ç–º–µ–Ω–∞", on_click=dialog.close).classes(
                "bg-gray-300 hover:bg-gray-400 text-gray-700 px-6 py-2 rounded-lg transition-all duration-200"
            )


            ui.button("–î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É", on_click=on_add, icon="add").classes(
                "bg-indigo-600 hover:bg-indigo-700 text-white px-6 py-2 rounded-lg transition-all duration-200"
            )

    dialog.open()


def create_overview_tab():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É –æ–±–∑–æ—Ä–∞ —Å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
    with ui.column().classes("w-full h-full p-6 space-y-6"):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        with ui.row().classes("items-center justify-between"):
            ui.label("–û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è").classes("text-2xl font-bold text-gray-800")
            ui.button("–û–±–Ω–æ–≤–∏—Ç—å", icon="refresh").classes(
                "bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg"
            ).on("click", lambda: refresh_overview_data())

        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        stats_container = ui.row().classes("gap-4 w-full")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ç—Ä–∏ —Ä–∞–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        with ui.row().classes("gap-4 flex-1"):
            # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ç–æ–ø –ø–æ–∑–∏—Ü–∏–∏
            with ui.column().classes("flex-1"):
                with ui.card().classes("p-4 bg-white shadow-sm rounded-lg border border-gray-200 h-full"):
                    ui.label("–¢–æ–ø –ø–æ–∑–∏—Ü–∏–∏").classes("text-lg font-semibold text-gray-800 mb-2")
                    top_positions_container = ui.column().classes("space-y-1 max-h-[600px] overflow-y-auto")
            
            # –°—Ä–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ - —Ö—É–¥—à–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            with ui.column().classes("flex-1"):
                with ui.card().classes("p-4 bg-white shadow-sm rounded-lg border border-gray-200 h-full"):
                    ui.label("–•—É–¥—à–∏–µ –ø–æ–∑–∏—Ü–∏–∏").classes("text-lg font-semibold text-gray-800 mb-2")
                    worst_positions_container = ui.column().classes("space-y-1 max-h-[600px] overflow-y-auto")
                
            # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            with ui.column().classes("flex-1"):
                with ui.card().classes("p-6 bg-white shadow-sm rounded-lg border border-gray-200 h-full"):
                    ui.label("–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è").classes("text-lg font-semibold text-gray-800 mb-4")
                    portfolio_chart_container = ui.column().classes("flex-1 items-center justify-center")
        
        def refresh_top_positions():
            """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ø –ø–æ–∑–∏—Ü–∏–∏"""
            top_positions_container.clear()
            with top_positions_container:
                try:
                    portfolio_stats = get_portfolio_stats()
                    top_positions = portfolio_stats.get('top_positions', [])
                    
                    if top_positions:
                        for i, pos in enumerate(top_positions[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
                            coin = pos['coin']
                            value = pos.get('value', 0)
                            pnl = pos.get('unreal_pnl', 0)
                            pnl_color = "text-green-600" if pnl >= 0 else "text-red-600"
                            
                            with ui.card().classes("p-1 bg-gray-50 hover:bg-gray-100 transition-colors"):
                                with ui.row().classes("items-center justify-between"):
                                    with ui.row().classes("items-center gap-1"):
                                        ui.label(f"#{i}").classes("text-xs text-gray-500 w-4 font-medium")
                                        ui.label(f"{coin}").classes("font-semibold text-gray-800 text-xs")
                                    with ui.column().classes("text-right"):
                                        ui.label(f"${value:.2f}").classes("font-bold text-gray-800 text-xs")
                                        ui.label(f"{pnl:+.2f}").classes(f"text-xs font-medium {pnl_color}")
                    else:
                        with ui.card().classes("p-6 text-center bg-gray-50"):
                            ui.label("üìä").classes("text-3xl mb-2")
                            ui.label("–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π").classes("text-gray-500")
                                
                except Exception as e:
                    with ui.card().classes("p-6 text-center bg-red-50"):
                        ui.label("‚ö†Ô∏è").classes("text-3xl mb-2")
                        ui.label("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏").classes("text-red-500")
        
        def refresh_worst_positions():
            """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ö—É–¥—à–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (—Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ —É–±—ã—Ç–∫–∞–º–∏)"""
            worst_positions_container.clear()
            with worst_positions_container:
                try:
                    portfolio_stats = get_portfolio_stats()
                    positions = portfolio_stats.get('positions', [])
                    
                    if positions:
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã—Ç–∫–∞–º (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ, —á—Ç–æ–±—ã —Ö—É–¥—à–∏–µ –±—ã–ª–∏ –ø–µ—Ä–≤—ã–º–∏)
                        worst_positions = sorted(positions, key=lambda x: x.get('unreal_pnl', 0))[:5]
                        
                        for i, pos in enumerate(worst_positions, 1):
                            coin = pos['coin']
                            value = pos.get('value', 0)
                            pnl = pos.get('unreal_pnl', 0)
                            pnl_color = "text-green-600" if pnl >= 0 else "text-red-600"
                            
                            with ui.card().classes("p-1 bg-red-50 hover:bg-red-100 transition-colors"):
                                with ui.row().classes("items-center justify-between"):
                                    with ui.row().classes("items-center gap-1"):
                                        ui.label(f"#{i}").classes("text-xs text-gray-500 w-4 font-medium")
                                        ui.label(f"{coin}").classes("font-semibold text-gray-800 text-xs")
                                    with ui.column().classes("text-right"):
                                        ui.label(f"${value:.2f}").classes("font-bold text-gray-800 text-xs")
                                        ui.label(f"{pnl:+.2f}").classes(f"text-xs font-medium {pnl_color}")
                    else:
                        with ui.card().classes("p-6 text-center bg-gray-50"):
                            ui.label("üìä").classes("text-3xl mb-2")
                            ui.label("–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π").classes("text-gray-500")
                                
                except Exception as e:
                    with ui.card().classes("p-6 text-center bg-red-50"):
                        ui.label("‚ö†Ô∏è").classes("text-3xl mb-2")
                        ui.label("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏").classes("text-red-500")
        
        def refresh_portfolio_chart():
            """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
            portfolio_chart_container.clear()
            with portfolio_chart_container:
                try:
                    portfolio_stats = get_portfolio_stats()
                    total_value = portfolio_stats.get('totals', {}).get('total_value', 0)
                    total_unreal = portfolio_stats.get('totals', {}).get('total_unreal', 0)
                    
                    # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                    with ui.column().classes("items-center space-y-4"):
                        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–∫–æ–Ω–∫–∞
                        ui.label("üí∞").classes("text-5xl")
                        
                        # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
                        ui.label(f"${total_value:.2f}").classes("text-4xl font-bold text-blue-600")
                        
                        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä PnL
                        if total_unreal >= 0:
                            ui.label("üìà").classes("text-3xl text-green-500")
                            ui.label(f"+${total_unreal:.2f}").classes("text-lg font-semibold text-green-600")
                        else:
                            ui.label("üìâ").classes("text-3xl text-red-500")
                            ui.label(f"${total_unreal:.2f}").classes("text-lg font-semibold text-red-600")
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        ui.label("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è").classes("text-sm text-gray-600 text-center")
                            
                except Exception:
                    with ui.column().classes("items-center space-y-4"):
                        ui.label("üìä").classes("text-5xl")
                        ui.label("$0.00").classes("text-4xl font-bold text-gray-400")
                        ui.label("–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã").classes("text-sm text-gray-500")
        
        def refresh_overview_data():
            """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –æ–±–∑–æ—Ä–∞"""
            stats_container.clear()
            with stats_container:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                    portfolio_stats = get_portfolio_stats()
                    totals = portfolio_stats.get('totals', {})
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    total_value = totals.get('total_value', 0)
                    total_unreal = totals.get('total_unreal', 0)
                    total_realized = totals.get('total_realized', 0)
                    
                    # –î–Ω–µ–≤–Ω–æ–π PnL (–ø–æ–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
                    daily_pnl = total_unreal  # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ PnL
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                    create_compact_stat_card("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"${total_value:.2f}", "üí∞")
                    create_compact_stat_card("–î–Ω–µ–≤–Ω–æ–π PnL", f"{daily_pnl:+.2f} USD", "üìà", daily_pnl >= 0)
                    create_compact_stat_card("–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", f"{total_unreal:+.2f} USD", "üíé", total_unreal >= 0)
                    create_compact_stat_card("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", f"{total_realized:+.2f} USD", "‚úÖ", total_realized >= 0)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ø –ø–æ–∑–∏—Ü–∏–∏, —Ö—É–¥—à–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –≥—Ä–∞—Ñ–∏–∫
                    refresh_top_positions()
                    refresh_worst_positions()
                    refresh_portfolio_chart()
                    
                except Exception as e:
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                    create_compact_stat_card("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", "$0.00", "üí∞")
                    create_compact_stat_card("–î–Ω–µ–≤–Ω–æ–π PnL", "+$0.00", "üìà", True)
                    create_compact_stat_card("–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", "+$0.00", "üíé", True)
                    create_compact_stat_card("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", "+$0.00", "‚úÖ", True)
                    ui.notify(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", type="negative")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        refresh_overview_data()


def create_compact_stat_card(title, value, icon, is_positive=True):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É"""
    color_class = "text-green-600" if is_positive else "text-red-600"
    
    with ui.card().classes("p-4 bg-white shadow-sm rounded-lg border border-gray-200 flex-1 hover:shadow-md transition-shadow"):
        with ui.column().classes("items-center text-center space-y-2"):
            ui.label(icon).classes("text-xl")
            ui.label(value).classes(f"text-xl font-bold {color_class}")
            ui.label(title).classes("text-sm text-gray-600 font-medium")


def refresh():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    ui.notify("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", color="positive")


def portfolio_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –∏ –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–≤–æ–¥–∞"""
    from app.core.version import get_app_info
    
    # –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
    ui.add_head_html('''
    <style>
    /* –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –≤–∫–ª–∞–¥–æ–∫ */
    .q-tabs__content {
        display: flex !important;
        flex-direction: row !important;
        align-items: stretch !important;
        overflow: visible !important;
        position: relative !important;
    }
    
    /* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∏ –ø–æ–∑–∏—Ü–∏—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏ */
    .q-tab {
        flex: 0 0 auto !important;
        width: 140px !important;
        min-width: 140px !important;
        max-width: 140px !important;
        text-align: center !important;
        position: relative !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        padding: 12px 16px !important;
        margin: 0 !important;
        border: none !important;
        background: transparent !important;
        transition: all 0.2s ease !important;
        box-sizing: border-box !important;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ */
    .q-tab--active {
        color: #2563eb !important;
        background-color: #eff6ff !important;
        border-bottom: 2px solid #2563eb !important;
        font-weight: 600 !important;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫ */
    .q-tab:not(.q-tab--active) {
        color: #6b7280 !important;
        background-color: transparent !important;
        border-bottom: 2px solid transparent !important;
    }
    
    /* Hover —ç—Ñ—Ñ–µ–∫—Ç—ã */
    .q-tab:hover:not(.q-tab--active) {
        color: #374151 !important;
        background-color: #f9fafb !important;
        border-bottom: 2px solid #d1d5db !important;
    }
    
    /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∫–ª–∞–¥–æ–∫ */
    .q-tabs {
        border-bottom: 1px solid #e5e7eb !important;
        background: white !important;
        position: relative !important;
    }
    
    /* –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–º–µ—â–µ–Ω–∏—è */
    .q-tab__content {
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        width: 100% !important;
    }
    
    /* –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ */
    .q-tab .q-icon {
        margin-right: 6px !important;
        font-size: 16px !important;
    }
    </style>
    ''')

    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é
    with ui.row().classes("w-full h-screen overflow-hidden"):
        # –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        with ui.column().classes(
            "w-64 bg-gray-900 text-white p-4 space-y-4 overflow-y-auto"
        ):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            with ui.row().classes("items-center gap-2 mb-6"):
                ui.icon("account_balance_wallet").classes("text-2xl text-blue-400")
                with ui.column().classes("gap-1"):
                    ui.label("Portfolio Manager").classes(
                        "text-lg font-bold text-white"
                    )
                    ui.label(f"v{get_app_info()['version']}").classes(
                        "text-xs text-gray-300 font-medium"
                    )

            # –ù–ê–í–ò–ì–ê–¶–ò–Ø (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            with ui.column().classes("space-y-2"):
                ui.label("–ù–∞–≤–∏–≥–∞—Ü–∏—è").classes(
                    "text-sm font-semibold text-gray-300 uppercase tracking-wide"
                )

                # –ì–ª–∞–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
                overview_btn = (
                    ui.button("üìä –û–±–∑–æ—Ä", icon="dashboard")
                    .classes(
                        "w-full justify-start text-left bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-lg transition-all duration-200"
                    )
                    .on("click", lambda: switch_tab_with_styles("overview"))
                )

                positions_btn = (
                    ui.button("üíº –ü–æ–∑–∏—Ü–∏–∏", icon="account_balance")
                    .classes(
                        "w-full justify-start text-left bg-gray-700 hover:bg-gray-600 text-white px-3 py-2 rounded-lg transition-all duration-200"
                    )
                    .on("click", lambda: switch_tab_with_styles("positions"))
                )

                transactions_btn = (
                    ui.button("üìù –°–¥–µ–ª–∫–∏", icon="receipt_long")
                    .classes(
                        "w-full justify-start text-left bg-gray-700 hover:bg-gray-600 text-white px-3 py-2 rounded-lg transition-all duration-200"
                    )
                    .on("click", lambda: switch_tab_with_styles("transactions"))
                )

                analytics_btn = (
                    ui.button("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", icon="analytics")
                    .classes(
                        "w-full justify-start text-left bg-gray-700 hover:bg-gray-600 text-white px-3 py-2 rounded-lg transition-all duration-200"
                    )
                    .on("click", lambda: switch_tab_with_styles("analytics"))
                )

            # –ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            with ui.column().classes("space-y-2 mt-6"):
                ui.label("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è").classes(
                    "text-sm font-semibold text-gray-300 uppercase tracking-wide"
                )

                # –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –¥–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É
                add_btn = (
                    ui.button("+ –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É", icon="add")
                    .classes(
                        "w-full justify-start text-left bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded-lg font-semibold transition-all duration-200 shadow-lg"
                    )
                    .on("click", lambda: open_enhanced_add_dialog())
                )

                # –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                refresh_button = (
                    ui.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", icon="refresh")
                    .classes(
                        "w-full justify-start text-left bg-orange-600 hover:bg-orange-700 text-white px-3 py-2 rounded-lg transition-all duration-200"
                    )
                    .on("click", lambda: refresh())
                )

                # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                export_btn = (
                    ui.button("üì§ –≠–∫—Å–ø–æ—Ä—Ç", icon="download")
                    .classes(
                        "w-full justify-start text-left bg-purple-600 hover:bg-purple-700 text-white px-3 py-2 rounded-lg transition-all duration-200"
                    )
                    .on("click", lambda: ui.notify("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", type="info"))
                )

            # –¢–ò–ü–´ –ê–ö–¢–ò–í–û–í (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            with ui.column().classes("space-y-2 mt-6"):
                ui.label("–¢–∏–ø—ã –∞–∫—Ç–∏–≤–æ–≤").classes(
                    "text-sm font-semibold text-gray-300 uppercase tracking-wide"
                )

                # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–∞–∫—Ç–∏–≤–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                crypto_btn = ui.button(
                    "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", icon="currency_bitcoin"
                ).classes(
                    "w-full justify-start text-left bg-yellow-600 hover:bg-yellow-700 text-white px-3 py-2 rounded-lg transition-all duration-200"
                )

                # –ê–∫—Ü–∏–∏
                stocks_btn = (
                    ui.button("üìà –ê–∫—Ü–∏–∏", icon="trending_up")
                    .classes(
                        "w-full justify-start text-left bg-gray-700 hover:bg-gray-600 text-white px-3 py-2 rounded-lg transition-all duration-200"
                    )
                    .on("click", lambda: ui.notify("–§—É–Ω–∫—Ü–∏—è –∞–∫—Ü–∏–π", color="info"))
                )

            # –ù–ò–ñ–ù–Ø–Ø –ß–ê–°–¢–¨ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            with ui.column().classes("space-y-2 mt-auto pt-6"):
                ui.button("‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", icon="info").classes(
                    "w-full justify-start text-left bg-gray-700 hover:bg-gray-600 text-white px-3 py-2 rounded-lg transition-all duration-200"
                ).on("click", lambda: ui.navigate.to("/about"))

        # –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢
        with ui.column().classes("flex-1 bg-gray-50 overflow-hidden"):
            # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            with ui.row().classes(
                "w-full h-16 bg-white shadow-sm border-b border-gray-200 px-6 items-center justify-between"
            ):
                # –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
                with ui.row().classes("items-center"):
                    ui.icon("account_balance_wallet").classes("text-2xl text-blue-600 mr-3")
                    with ui.column().classes("items-start"):
                        ui.label("Crypto Portfolio Manager").classes("text-xl font-bold text-gray-800")
                        ui.label("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º").classes("text-sm text-gray-500")

                # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (—Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
                with ui.row().classes("items-center space-x-3"):
                    # –ö–Ω–æ–ø–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –±–µ–π–¥–∂–µ–º
                    with ui.button(icon="notifications", color="primary") as badge_btn:
                        notification_badge = ui.badge("0", color="red").classes("absolute -top-2 -right-2")
                        notification_badge.visible = False
                    
                    # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—É–Ω–∏–∫–∞–ª—å–Ω–∞—è –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏)
                    ui.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", icon="settings").classes(
                        "bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg"
                    ).on("click", lambda: ui.notify("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", color="info"))
                    
                    # –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏ (—É–Ω–∏–∫–∞–ª—å–Ω–∞—è –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏)
                    ui.button("‚ùì –ü–æ–º–æ—â—å", icon="help").classes(
                        "bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg"
                    ).on("click", lambda: ui.notify("–°–ø—Ä–∞–≤–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", color="info"))
                    
                    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ (—É–Ω–∏–∫–∞–ª—å–Ω–∞—è –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏)
                    with ui.row().classes("items-center gap-2 px-3 py-2 bg-green-50 rounded-lg border border-green-200"):
                        ui.icon("circle").classes("text-green-500 text-xs")
                        ui.label("–û–Ω–ª–∞–π–Ω").classes("text-sm text-green-700 font-medium")

            # –û–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —Ç–∞–±–∞–º–∏
            with ui.column().classes("flex-1 p-6"):
                # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫
                current_tab_value = "overview"
                
                def switch_tab(tab_name):
                    nonlocal current_tab_value
                    current_tab_value = tab_name
                    update_tab_content()
                
                def update_tab_content():
                    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                    content_container.clear()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
                    with content_container:
                        if current_tab_value == "overview":
                            create_overview_tab()
                        elif current_tab_value == "positions":
                            create_positions_tab()
                        elif current_tab_value == "transactions":
                            create_transactions_tab()
                        elif current_tab_value == "alerts":
                            create_alerts_tab()
                        elif current_tab_value == "analytics":
                            create_analytics_tab_local()
                        # elif current_tab_value == "advanced_analytics":
                        #     create_advanced_analytics_tab()
                        elif current_tab_value == "cache":
                            create_cache_monitor_tab()
                        # elif current_tab_value == "notifications":
                        #     create_notifications_tab()
                        elif current_tab_value == "export_import":
                            create_export_import_tab()
                        elif current_tab_value == "stocks":
                            create_stocks_tab()
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏-–≤–∫–ª–∞–¥–∫–∏
                with ui.row().classes("w-full mb-6 border-b border-gray-200 bg-white"):
                    tab_buttons = {}
                    
                    # –ö–Ω–æ–ø–∫–∞ –û–±–∑–æ—Ä
                    tab_buttons["overview"] = ui.button("üìä –û–±–∑–æ—Ä").classes(
                        "px-6 py-3 text-sm font-medium border-b-2 border-transparent "
                        "hover:border-gray-300 transition-all duration-200 min-w-[140px]"
                    ).on("click", lambda: switch_tab_with_styles("overview"))
                    
                    # –ö–Ω–æ–ø–∫–∞ –ü–æ–∑–∏—Ü–∏–∏
                    tab_buttons["positions"] = ui.button("üíº –ü–æ–∑–∏—Ü–∏–∏").classes(
                        "px-6 py-3 text-sm font-medium border-b-2 border-transparent "
                        "hover:border-gray-300 transition-all duration-200 min-w-[140px]"
                    ).on("click", lambda: switch_tab_with_styles("positions"))
                    
                    # –ö–Ω–æ–ø–∫–∞ –°–¥–µ–ª–∫–∏
                    tab_buttons["transactions"] = ui.button("üìù –°–¥–µ–ª–∫–∏").classes(
                        "px-6 py-3 text-sm font-medium border-b-2 border-transparent "
                        "hover:border-gray-300 transition-all duration-200 min-w-[140px]"
                    ).on("click", lambda: switch_tab_with_styles("transactions"))
                    
                    # –ö–Ω–æ–ø–∫–∞ –ê–ª–µ—Ä—Ç—ã
                    tab_buttons["alerts"] = ui.button("üîî –ê–ª–µ—Ä—Ç—ã").classes(
                        "px-6 py-3 text-sm font-medium border-b-2 border-transparent "
                        "hover:border-gray-300 transition-all duration-200 min-w-[140px]"
                    ).on("click", lambda: switch_tab_with_styles("alerts"))
                    
                    # –ö–Ω–æ–ø–∫–∞ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                    tab_buttons["analytics"] = ui.button("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞").classes(
                        "px-6 py-3 text-sm font-medium border-b-2 border-transparent "
                        "hover:border-gray-300 transition-all duration-200 min-w-[140px]"
                    ).on("click", lambda: switch_tab_with_styles("analytics"))
                    
                    # –ö–Ω–æ–ø–∫–∞ –ê–∫—Ü–∏–∏
                    tab_buttons["stocks"] = ui.button("üìà –ê–∫—Ü–∏–∏").classes(
                        "px-6 py-3 text-sm font-medium border-b-2 border-transparent "
                        "hover:border-gray-300 transition-all duration-200 min-w-[140px]"
                    ).on("click", lambda: switch_tab_with_styles("stocks"))
                    
                    # –ö–Ω–æ–ø–∫–∞ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞)
                    # tab_buttons["advanced_analytics"] = ui.button("üìä –ì—Ä–∞—Ñ–∏–∫–∏").classes(
                    #     "px-6 py-3 text-sm font-medium border-b-2 border-transparent "
                    #     "hover:border-gray-300 transition-all duration-200 min-w-[140px]"
                    # ).on("click", lambda: switch_tab_with_styles("advanced_analytics"))
                    
                    # –ö–Ω–æ–ø–∫–∞ –ö—ç—à
                    tab_buttons["cache"] = ui.button("‚ö° –ö—ç—à").classes(
                        "px-6 py-3 text-sm font-medium border-b-2 border-transparent "
                        "hover:border-gray-300 transition-all duration-200 min-w-[140px]"
                    ).on("click", lambda: switch_tab_with_styles("cache"))
                    
                    # –ö–Ω–æ–ø–∫–∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞)
                    # tab_buttons["notifications"] = ui.button("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è").classes(
                    #     "px-6 py-3 text-sm font-medium border-b-2 border-transparent "
                    #     "hover:border-gray-300 transition-all duration-200 min-w-[140px]"
                    # ).on("click", lambda: switch_tab_with_styles("notifications"))
                    
                    # –ö–Ω–æ–ø–∫–∞ –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç
                    tab_buttons["export_import"] = ui.button("üì§üì• –≠–∫—Å–ø–æ—Ä—Ç").classes(
                        "px-6 py-3 text-sm font-medium border-b-2 border-transparent "
                        "hover:border-gray-300 transition-all duration-200 min-w-[140px]"
                    ).on("click", lambda: switch_tab_with_styles("export_import"))
                
                # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                content_container = ui.column().classes("w-full")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                update_tab_content()
                
                # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
                def create_positions_tab():
                    with ui.column().classes("w-full p-4 max-h-[calc(100vh-200px)] overflow-y-auto"):
                        ui.label("ü™ô –ü–æ–∑–∏—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è").classes("text-2xl font-bold text-gray-800 mb-4")
                        
                        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        with ui.row().classes("gap-3 mb-4"):
                            ui.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", icon="refresh").classes("bg-blue-500 text-white").on("click", lambda: refresh_positions_data())
                            ui.button("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", icon="analytics").classes("bg-green-500 text-white").on("click", lambda: switch_tab_with_styles("analytics"))
                        
                        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
                        positions_container = ui.column().classes("w-full")
                        
                        def refresh_positions_data():
                            positions_container.clear()
                            with positions_container:
                                try:
                                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                                    portfolio_stats = get_portfolio_stats()
                                    positions = portfolio_stats.get('top_positions', [])
                                    
                                    if not positions:
                                        with ui.card().classes("p-6 text-center bg-gray-50"):
                                            ui.icon("inbox").classes("text-4xl text-gray-400 mb-2")
                                            ui.label("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π").classes("text-lg text-gray-500")
                                            ui.label("–î–æ–±–∞–≤—å—Ç–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π").classes("text-sm text-gray-400")
                                        return
                                    
                                    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–∑–∏—Ü–∏–π
                                    with ui.card().classes("p-4 bg-white shadow-sm rounded-lg"):
                                        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
                                        with ui.row().classes("w-full bg-gray-100 p-3 rounded-t-lg font-semibold text-gray-700"):
                                            ui.label("–ú–æ–Ω–µ—Ç–∞").classes("flex-1")
                                            ui.label("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ").classes("flex-1")
                                            ui.label("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞").classes("flex-1")
                                            ui.label("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞").classes("flex-1")
                                            ui.label("–°—Ç–æ–∏–º–æ—Å—Ç—å").classes("flex-1")
                                            ui.label("P&L").classes("flex-1")
                                            ui.label("ROI").classes("flex-1")
                                        
                                        # –°—Ç—Ä–æ–∫–∏ –ø–æ–∑–∏—Ü–∏–π
                                        for pos in positions:
                                            coin = pos['coin']
                                            qty = pos.get('quantity', 0)
                                            avg_cost = pos.get('avg_cost', 0)
                                            current_price = pos.get('price', 0)
                                            current_value = pos.get('value', 0)
                                            pnl = pos.get('unreal_pnl', 0)
                                            pnl_percent = pos.get('unreal_pct', 0)
                                            
                                            # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è P&L
                                            pnl_color = "text-green-600" if pnl >= 0 else "text-red-600"
                                            pnl_bg = "bg-green-50" if pnl >= 0 else "bg-red-50"
                                            
                                            with ui.row().classes(f"w-full p-3 border-b border-gray-200 hover:bg-gray-50 {pnl_bg}"):
                                                # –ú–æ–Ω–µ—Ç–∞
                                                with ui.column().classes("flex-1"):
                                                    ui.label(coin).classes("font-semibold text-gray-800")
                                                    ui.label(pos.get('strategy', 'unknown')).classes("text-xs text-gray-500")
                                                
                                                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                                                ui.label(f"{qty:.4f}").classes("flex-1 text-gray-700")
                                                
                                                # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
                                                ui.label(f"${avg_cost:.2f}").classes("flex-1 text-gray-700")
                                                
                                                # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
                                                if current_price > 0:
                                                    ui.label(f"${current_price:.2f}").classes("flex-1 text-gray-700")
                                                else:
                                                    ui.label("–ó–∞–≥—Ä—É–∑–∫–∞...").classes("flex-1 text-gray-500 italic")
                                                
                                                # –°—Ç–æ–∏–º–æ—Å—Ç—å
                                                if current_value > 0:
                                                    ui.label(f"${current_value:.2f}").classes("flex-1 font-semibold text-gray-800")
                                                else:
                                                    ui.label("–ó–∞–≥—Ä—É–∑–∫–∞...").classes("flex-1 text-gray-500 italic")
                                                
                                                # P&L
                                                if current_price > 0:
                                                    ui.label(f"${pnl:.2f}").classes(f"flex-1 font-semibold {pnl_color}")
                                                else:
                                                    ui.label("–ó–∞–≥—Ä—É–∑–∫–∞...").classes("flex-1 text-gray-500 italic")
                                                
                                                # ROI
                                                if current_price > 0:
                                                    ui.label(f"{pnl_percent:.1f}%").classes(f"flex-1 font-semibold {pnl_color}")
                                                else:
                                                    ui.label("–ó–∞–≥—Ä—É–∑–∫–∞...").classes("flex-1 text-gray-500 italic")
                                    
                                    # –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                    totals = portfolio_stats.get('totals', {})
                                    with ui.card().classes("p-6 bg-gradient-to-r from-blue-50 to-green-50 mt-4 min-h-[160px] mb-4"):
                                        ui.label("üìä –°–≤–æ–¥–∫–∞ –ø–æ–∑–∏—Ü–∏–π").classes("text-lg font-semibold text-blue-800 mb-4")
                                        
                                        with ui.row().classes("w-full gap-6"):
                                            with ui.column().classes("flex-1 text-center min-w-[120px]"):
                                                ui.label("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å").classes("text-sm text-gray-500 mb-2")
                                                ui.label(f"${totals.get('total_value', 0):.2f}").classes("text-xl font-bold text-green-600")
                                            
                                            with ui.column().classes("flex-1 text-center min-w-[120px]"):
                                                ui.label("–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L").classes("text-sm text-gray-500 mb-2")
                                                total_pnl = totals.get('total_unreal', 0)
                                                pnl_color = "text-green-600" if total_pnl >= 0 else "text-red-600"
                                                ui.label(f"${total_pnl:.2f}").classes(f"text-xl font-bold {pnl_color}")
                                            
                                            with ui.column().classes("flex-1 text-center min-w-[100px]"):
                                                ui.label("ROI").classes("text-sm text-gray-500 mb-2")
                                                roi = totals.get('total_unreal_pct', 0)
                                                roi_color = "text-green-600" if roi >= 0 else "text-red-600"
                                                ui.label(f"{roi:.1f}%").classes(f"text-xl font-bold {roi_color}")
                                            
                                            with ui.column().classes("flex-1 text-center min-w-[100px]"):
                                                ui.label("–ü–æ–∑–∏—Ü–∏–π").classes("text-sm text-gray-500 mb-2")
                                                ui.label(f"{len(positions)}").classes("text-xl font-bold text-blue-600")
                                
                                except Exception as e:
                                    with ui.card().classes("p-6 text-center bg-red-50"):
                                        ui.icon("error").classes("text-4xl text-red-400 mb-2")
                                        ui.label("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π").classes("text-lg text-red-600")
                                        ui.label(f"–î–µ—Ç–∞–ª–∏: {e}").classes("text-sm text-red-500")
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
                        refresh_positions_data()
                
                def create_transactions_tab():
                    with ui.column().classes("w-full space-y-4 max-h-[calc(100vh-200px)] overflow-y-auto p-4"):
                        ui.label("–°–¥–µ–ª–∫–∏").classes("text-2xl font-bold text-gray-800")
                        with ui.card().classes("p-4 bg-white shadow-sm rounded-lg"):
                            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
                            try:
                                transactions = list_transactions()
                                if transactions:
                                    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–¥–µ–ª–æ–∫
                                    columns = [
                                        {"name": "id", "label": "ID", "field": "id", "sortable": True},
                                        {"name": "coin", "label": "–ú–æ–Ω–µ—Ç–∞", "field": "coin", "sortable": True},
                                        {"name": "type", "label": "–¢–∏–ø", "field": "type", "sortable": True},
                                        {"name": "quantity", "label": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "field": "quantity", "sortable": True},
                                        {"name": "price", "label": "–¶–µ–Ω–∞", "field": "price", "sortable": True},
                                        {"name": "source", "label": "–ò—Å—Ç–æ—á–Ω–∏–∫", "field": "source", "sortable": True},
                                        {"name": "strategy", "label": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "field": "strategy", "sortable": True},
                                        {"name": "created_at", "label": "–î–∞—Ç–∞", "field": "created_at", "sortable": True},
                                        {"name": "notes", "label": "–ó–∞–º–µ—Ç–∫–∏", "field": "notes", "sortable": True},
                                    ]
                                    
                                    ui.table(
                                        columns=columns,
                                        rows=transactions,
                                        row_key="id"
                                    ).classes("w-full")
                                else:
                                    with ui.row().classes("h-48 items-center justify-center bg-gray-50 rounded-lg"):
                                        ui.label("–ù–µ—Ç —Å–¥–µ–ª–æ–∫").classes("text-gray-500")
                            except Exception as e:
                                with ui.row().classes("h-48 items-center justify-center bg-gray-50 rounded-lg"):
                                    ui.label(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}").classes("text-red-500")
                
                def create_analytics_tab_local():
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
                    create_analytics_tab()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
                def update_tab_styles():
                    for tab_name, button in tab_buttons.items():
                        if tab_name == current_tab_value:
                            # –ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
                            button.classes(
                                "px-6 py-3 text-sm font-semibold border-b-2 border-blue-500 "
                                "text-blue-600 bg-blue-50 transition-all duration-200 min-w-[140px]"
                            )
                        else:
                            # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
                            button.classes(
                                "px-6 py-3 text-sm font-medium border-b-2 border-transparent "
                                "text-gray-600 hover:text-gray-800 hover:border-gray-300 "
                                "transition-all duration-200 min-w-[140px]"
                            )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–æ–∫
                def switch_tab_with_styles(tab_name):
                    switch_tab(tab_name)
                    update_tab_styles()
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏
                update_tab_styles()




def refresh():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è
        stats = get_portfolio_stats()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å UI —ç–ª–µ–º–µ–Ω—Ç—ã
        ui.notify("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", color="positive")
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        # ui.run_javascript("location.reload()")  # –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
    except Exception as e:
        ui.notify(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", color="negative")


def show_about_page():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ' —Å —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º."""
    from app.ui.about_page_new import show_about_page as show_new_about_page
    show_new_about_page()




def create_alerts_tab():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –∞–ª–µ—Ä—Ç–∞–º–∏ –ø–æ —Ü–µ–Ω–∞–º"""
    with ui.column().classes("w-full space-y-4 max-h-[calc(100vh-200px)] overflow-y-auto p-4"):
        ui.label("üîî –ê–ª–µ—Ä—Ç—ã –ø–æ —Ü–µ–Ω–∞–º").classes("text-2xl font-bold text-gray-800")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        with ui.row().classes("gap-3 mb-4"):
            ui.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", icon="add").classes("bg-blue-500 text-white").on("click", lambda: open_add_alert_dialog())
            ui.button("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–µ—Ä—Ç—ã", icon="refresh").classes("bg-green-500 text-white").on("click", lambda: check_alerts())
            ui.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", icon="analytics").classes("bg-purple-500 text-white").on("click", lambda: show_alert_statistics())
        
        # –°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤
        with ui.card().classes("p-4 bg-white shadow-sm rounded-lg"):
            ui.label("–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã").classes("text-lg font-semibold text-gray-800 mb-4")
            
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
            alerts_container = ui.column().classes("w-full")
            
            def refresh_alerts_list():
                """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤"""
                alerts_container.clear()
                
                try:
                    alerts = get_price_alerts(active_only=True)
                    if alerts:
                        for alert in alerts:
                            with alerts_container:
                                with ui.card().classes("p-3 mb-2 border-l-4 border-blue-400"):
                                    with ui.row().classes("items-center justify-between"):
                                        with ui.column().classes("flex-1"):
                                            ui.label(f"üí∞ {alert.coin}").classes("font-semibold text-gray-800")
                                            ui.label(f"–¶–µ–ª—å: {alert.target_price} {CURRENCY} ({alert.alert_type})").classes("text-sm text-gray-600")
                                            if alert.notes:
                                                ui.label(f"–ó–∞–º–µ—Ç–∫–∞: {alert.notes}").classes("text-xs text-gray-500")
                                        with ui.row().classes("gap-2"):
                                            ui.button("‚úèÔ∏è", on_click=lambda a=alert: edit_alert(a)).props("size=sm flat").classes("text-blue-600")
                                            ui.button("üóëÔ∏è", on_click=lambda a=alert: delete_alert(a)).props("size=sm flat").classes("text-red-600")
                    else:
                        with alerts_container:
                            with ui.row().classes("h-32 items-center justify-center bg-gray-50 rounded-lg"):
                                ui.label("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤").classes("text-gray-500")
                except Exception as e:
                    with alerts_container:
                        with ui.row().classes("h-32 items-center justify-center bg-gray-50 rounded-lg"):
                            ui.label(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}").classes("text-red-500")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            refresh_alerts_list()
            
            # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–ª–µ—Ä—Ç–∞–º–∏
            def open_add_alert_dialog():
                """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"""
                with ui.dialog() as dialog, ui.card().classes("p-6 w-96"):
                    ui.label("–î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –ø–æ —Ü–µ–Ω–µ").classes("text-lg font-semibold mb-4")
                    
                    coin_input = ui.input("–ú–æ–Ω–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC)").classes("w-full mb-3")
                    price_input = ui.number("–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞").classes("w-full mb-3")
                    
                    with ui.row().classes("w-full mb-3"):
                        ui.label("–¢–∏–ø –∞–ª–µ—Ä—Ç–∞:").classes("text-sm font-medium")
                        alert_type_select = ui.select(
                            ["above", "below"], 
                            value="above",
                            label="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø"
                        ).classes("w-full")
                    
                    notes_input = ui.textarea("–ó–∞–º–µ—Ç–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)").classes("w-full mb-4")
                    
                    def add_alert():
                        try:
                            coin = coin_input.value.strip().upper()
                            target_price = float(price_input.value)
                            alert_type = alert_type_select.value
                            notes = notes_input.value.strip() if notes_input.value else None
                            
                            if not coin or target_price <= 0:
                                ui.notify("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è", type="negative")
                                return
                            
                            alert_data = PriceAlertIn(
                                coin=coin,
                                target_price=target_price,
                                alert_type=alert_type,
                                notes=notes
                            )
                            
                            add_price_alert(alert_data)
                            ui.notify(f"–ê–ª–µ—Ä—Ç –¥–ª—è {coin} —Å–æ–∑–¥–∞–Ω", type="positive")
                            dialog.close()
                            refresh_alerts_list()
                            
                        except Exception as e:
                            ui.notify(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}", type="negative")
                    
                    with ui.row().classes("justify-end gap-3"):
                        ui.button("–û—Ç–º–µ–Ω–∞", on_click=dialog.close)
                        ui.button("–î–æ–±–∞–≤–∏—Ç—å", on_click=add_alert).classes("bg-blue-500 text-white")
                    
                    dialog.open()
            
            def edit_alert(alert):
                """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∞–ª–µ—Ä—Ç"""
                ui.notify("–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", type="info")
            
            def delete_alert(alert):
                """–£–¥–∞–ª—è–µ—Ç –∞–ª–µ—Ä—Ç"""
                try:
                    if delete_price_alert(alert.id):
                        ui.notify(f"–ê–ª–µ—Ä—Ç –¥–ª—è {alert.coin} —É–¥–∞–ª–µ–Ω", type="positive")
                        refresh_alerts_list()
                    else:
                        ui.notify("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞", type="negative")
                except Exception as e:
                    ui.notify(f"–û—à–∏–±–∫–∞: {e}", type="negative")
            
            def check_alerts():
                """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–ª–µ—Ä—Ç—ã"""
                try:
                    triggered = check_price_alerts()
                    if triggered:
                        for alert in triggered:
                            ui.notify(
                                f"üîî –ê–ª–µ—Ä—Ç —Å—Ä–∞–±–æ—Ç–∞–ª! {alert['coin']}: {alert['current_price']} {CURRENCY} ({alert['alert_type']} {alert['target_price']})",
                                type="positive",
                                timeout=10000
                            )
                        refresh_alerts_list()
                    else:
                        ui.notify("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", type="info")
                except Exception as e:
                    ui.notify(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}", type="negative")
            
            def show_alert_statistics():
                """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–ª–µ—Ä—Ç–æ–≤"""
                try:
                    stats = get_alert_statistics()
                    with ui.dialog() as dialog, ui.card().classes("p-6"):
                        ui.label("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤").classes("text-lg font-semibold mb-4")
                        
                        with ui.column().classes("space-y-2"):
                            ui.label(f"–í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: {stats['total_alerts']}")
                            ui.label(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_alerts']}")
                            ui.label(f"–°—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö: {stats['triggered_alerts']}")
                        
                        with ui.row().classes("justify-end mt-4"):
                            ui.button("–ó–∞–∫—Ä—ã—Ç—å", on_click=dialog.close)
                        
                        dialog.open()
                except Exception as e:
                    ui.notify(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", type="negative")


def create_charts_tab():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    with ui.column().classes("w-full space-y-6"):
        ui.label("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è").classes("text-2xl font-bold text-gray-800")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        with ui.row().classes("gap-3 mb-4"):
            ui.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", icon="refresh").classes("bg-blue-500 text-white").on("click", lambda: refresh_all_charts())
            ui.button("üìä –°–≤–æ–¥–∫–∞", icon="analytics").classes("bg-green-500 text-white").on("click", lambda: show_portfolio_summary())
        
        # –°–≤–æ–¥–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        with ui.row().classes("w-full gap-4 mb-6"):
            summary = get_portfolio_stats()
            
            with ui.card().classes("p-4 bg-blue-50 border-l-4 border-blue-400"):
                ui.label("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫").classes("text-sm text-gray-600")
                ui.label(str(summary['total_transactions'])).classes("text-2xl font-bold text-blue-600")
            
            with ui.card().classes("p-4 bg-green-50 border-l-4 border-green-400"):
                ui.label("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç").classes("text-sm text-gray-600")
                ui.label(str(summary['unique_coins'])).classes("text-2xl font-bold text-green-600")
            
            with ui.card().classes("p-4 bg-purple-50 border-l-4 border-purple-400"):
                ui.label("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π").classes("text-sm text-gray-600")
                ui.label(str(summary['active_positions'])).classes("text-2xl font-bold text-purple-600")
            
            with ui.card().classes("p-4 bg-orange-50 border-l-4 border-orange-400"):
                ui.label("–û–±—â–∏–π –æ–±—ä–µ–º").classes("text-sm text-gray-600")
                ui.label(f"{summary['total_volume']:.2f} {CURRENCY}").classes("text-2xl font-bold text-orange-600")
        
        # –ì—Ä–∞—Ñ–∏–∫–∏ –≤ —Å–µ—Ç–∫–µ 2x2
        with ui.row().classes("w-full gap-4"):
            # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
            with ui.column().classes("flex-1 space-y-4"):
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                with ui.card().classes("p-4 bg-white shadow-sm rounded-lg"):
                    ui.label("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è").classes("text-lg font-semibold text-gray-800 mb-4")
                    portfolio_chart_container = ui.html("").classes("w-full")
                
                # –í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                with ui.card().classes("p-4 bg-white shadow-sm rounded-lg"):
                    ui.label("–í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π").classes("text-lg font-semibold text-gray-800 mb-4")
                    timeline_chart_container = ui.html("").classes("w-full")
            
            # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
            with ui.column().classes("flex-1 space-y-4"):
                # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
                with ui.card().classes("p-4 bg-white shadow-sm rounded-lg"):
                    ui.label("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º").classes("text-lg font-semibold text-gray-800 mb-4")
                    strategy_chart_container = ui.html("").classes("w-full")
                
                # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                with ui.card().classes("p-4 bg-white shadow-sm rounded-lg"):
                    ui.label("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º").classes("text-lg font-semibold text-gray-800 mb-4")
                    source_chart_container = ui.html("").classes("w-full")
        
        def refresh_all_charts():
            """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏"""
            try:
                ui.notify("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤...", type="info")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –≥—Ä–∞—Ñ–∏–∫
                # portfolio_chart_container.content = create_portfolio_distribution_chart()
                # timeline_chart_container.content = create_transactions_timeline_chart()
                # strategy_chart_container.content = create_strategy_performance_chart()
                # source_chart_container.content = create_source_activity_chart()
                
                ui.notify("–ì—Ä–∞—Ñ–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", type="positive")
            except Exception as e:
                ui.notify(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}", type="negative")
        
        def show_portfolio_summary():
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
            try:
                summary = get_portfolio_stats()
                
                with ui.dialog() as dialog, ui.card().classes("p-6 w-96"):
                    ui.label("üìä –°–≤–æ–¥–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è").classes("text-lg font-semibold mb-4")
                    
                    with ui.column().classes("space-y-3"):
                        ui.label(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {summary['total_transactions']}")
                        ui.label(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç: {summary['unique_coins']}")
                        ui.label(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {summary['active_positions']}")
                        ui.label(f"–û–±—â–∏–π –æ–±—ä–µ–º: {summary['total_volume']:.2f} {CURRENCY}")
                        ui.label(f"–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏: {summary['avg_transaction_size']:.2f} {CURRENCY}")
                    
                    with ui.row().classes("justify-end mt-4"):
                        ui.button("–ó–∞–∫—Ä—ã—Ç—å", on_click=dialog.close)
                    
                    dialog.open()
            except Exception as e:
                ui.notify(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}", type="negative")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        refresh_all_charts()


@ui.page("/")
def main_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º"""
    portfolio_page()
