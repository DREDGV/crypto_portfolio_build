"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Crypto Portfolio Manager
"""
import asyncio
import threading
import time
from datetime import datetime, timedelta
from typing import List, Dict, Callable
from dataclasses import dataclass
from app.core.services import check_price_alerts


@dataclass
class Notification:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    id: str
    title: str
    message: str
    type: str  # 'success', 'info', 'warning', 'error'
    timestamp: datetime
    data: Dict = None


class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.notifications: List[Notification] = []
        self.subscribers: List[Callable] = []
        self.is_running = False
        self.alert_check_thread = None
        self.last_alert_check = None
        
    def subscribe(self, callback: Callable):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if callback not in self.subscribers:
            self.subscribers.append(callback)
    
    def unsubscribe(self, callback: Callable):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if callback in self.subscribers:
            self.subscribers.remove(callback)
    
    def add_notification(self, notification: Notification):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.notifications.append(notification)
        self._notify_subscribers(notification)
    
    def _notify_subscribers(self, notification: Notification):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        for callback in self.subscribers:
            try:
                callback(notification)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")
    
    def get_notifications(self, limit: int = 10) -> List[Notification]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return self.notifications[-limit:] if self.notifications else []
    
    def clear_notifications(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.notifications.clear()
    
    def start_alert_monitoring(self, check_interval: int = 30):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        if self.is_running:
            return
            
        self.is_running = True
        self.alert_check_thread = threading.Thread(
            target=self._monitor_alerts,
            args=(check_interval,),
            daemon=True
        )
        self.alert_check_thread.start()
    
    def stop_alert_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        self.is_running = False
        if self.alert_check_thread:
            self.alert_check_thread.join(timeout=5)
    
    def _monitor_alerts(self, check_interval: int):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–ª–µ—Ä—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
                triggered_alerts = check_price_alerts()
                
                for alert_data in triggered_alerts:
                    notification = self._create_alert_notification(alert_data)
                    self.add_notification(notification)
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                time.sleep(check_interval)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
                time.sleep(check_interval)
    
    def _create_alert_notification(self, alert_data: Dict) -> Notification:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ä–∞–±–æ—Ç–∞–≤—à–µ–º –∞–ª–µ—Ä—Ç–µ"""
        coin = alert_data.get('coin', 'Unknown')
        target_price = alert_data.get('target_price', 0)
        current_price = alert_data.get('current_price', 0)
        alert_type = alert_data.get('alert_type', 'above')
        notes = alert_data.get('notes', '')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if alert_type == 'above':
            title = f"üöÄ {coin} –≤—ã—Ä–æ—Å!"
            message = f"{coin} –¥–æ—Å—Ç–∏–≥ ${current_price:.2f} (—Ü–µ–ª—å: ${target_price:.2f})"
            notification_type = 'success'
        else:
            title = f"üìâ {coin} —É–ø–∞–ª!"
            message = f"{coin} —É–ø–∞–ª –¥–æ ${current_price:.2f} (—Ü–µ–ª—å: ${target_price:.2f})"
            notification_type = 'warning'
        
        if notes:
            message += f"\n–ó–∞–º–µ—Ç–∫–∞: {notes}"
        
        return Notification(
            id=f"alert_{alert_data.get('alert_id', 'unknown')}_{int(time.time())}",
            title=title,
            message=message,
            type=notification_type,
            timestamp=datetime.now(),
            data=alert_data
        )
    
    def create_manual_notification(self, title: str, message: str, 
                                 notification_type: str = 'info') -> Notification:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        notification = Notification(
            id=f"manual_{int(time.time())}",
            title=title,
            message=message,
            type=notification_type,
            timestamp=datetime.now()
        )
        self.add_notification(notification)
        return notification


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_manager = NotificationManager()


def get_notification_manager() -> NotificationManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return notification_manager


def start_notifications():
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    notification_manager.start_alert_monitoring()


def stop_notifications():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    notification_manager.stop_alert_monitoring()


def add_notification(title: str, message: str, notification_type: str = 'info'):
    """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    notification_manager.create_manual_notification(title, message, notification_type)
