#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–º–Ω–æ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —Ü–µ–Ω
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.adapters.prices import get_aggregated_price, get_smart_rounded_price


def test_smart_rounding():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–º–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ü–µ–Ω"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ú–ù–û–ì–û –û–ö–†–£–ì–õ–ï–ù–ò–Ø –¶–ï–ù")
    print("=" * 50)

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–æ–Ω–µ—Ç
    test_cases = [
        # (—Å–∏–º–≤–æ–ª, —Ü–µ–Ω–∞, –æ–∂–∏–¥–∞–µ–º–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ)
        ("BTC", 115866.254321, 2),  # –î–æ—Ä–æ–≥–∏–µ –º–æ–Ω–µ—Ç—ã - 2 –∑–Ω–∞–∫–∞
        ("ETH", 4670.54321, 2),  # –î–æ—Ä–æ–≥–∏–µ –º–æ–Ω–µ—Ç—ã - 2 –∑–Ω–∞–∫–∞
        ("LINK", 24.804866932415734, 2),  # –°—Ä–µ–¥–Ω–∏–µ –º–æ–Ω–µ—Ç—ã - 2 –∑–Ω–∞–∫–∞
        ("SOL", 247.523456, 2),  # –°—Ä–µ–¥–Ω–∏–µ –º–æ–Ω–µ—Ç—ã - 2 –∑–Ω–∞–∫–∞
        ("ADA", 0.9203456, 4),  # –î–µ—à–µ–≤—ã–µ –º–æ–Ω–µ—Ç—ã - 4 –∑–Ω–∞–∫–∞
        ("DOGE", 0.28854321, 4),  # –î–µ—à–µ–≤—ã–µ –º–æ–Ω–µ—Ç—ã - 4 –∑–Ω–∞–∫–∞
        ("SHIB", 0.000023456, 6),  # –û—á–µ–Ω—å –¥–µ—à–µ–≤—ã–µ - 6 –∑–Ω–∞–∫–æ–≤
    ]

    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è:")
    print()

    for symbol, price, expected_decimals in test_cases:
        rounded = get_smart_rounded_price(price, symbol)
        actual_decimals = len(str(rounded).split(".")[-1]) if "." in str(rounded) else 0

        print(f"üîç {symbol}: ${price:,.8f} ‚Üí ${rounded:,.8f}")
        print(f"   –û–∂–∏–¥–∞–µ–º–æ: {expected_decimals} –∑–Ω–∞–∫–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ: {actual_decimals}")

        if actual_decimals == expected_decimals:
            print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–∫—Ä—É–≥–ª–µ–Ω–æ")
        else:
            print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ")
        print()

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    test_coins = ["LINK", "BTC", "ETH", "ADA"]

    for coin in test_coins:
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {coin}...")
        result = get_aggregated_price(coin)

        if result:
            price = result["price"]
            print(f"   üíµ –¶–µ–Ω–∞: ${price}")
            print(f"   üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {result['source_count']}")
            print(f"   üè¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(result['sources'])}")

            if "price_range" in result:
                price_range = result["price_range"]
                print(f"   üìä –î–∏–∞–ø–∞–∑–æ–Ω: ${price_range['min']} - ${price_range['max']}")
                print(f"   üìè –†–∞–∑–±—Ä–æ—Å: ${price_range['spread']}")
        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

        print()

    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    test_smart_rounding()
